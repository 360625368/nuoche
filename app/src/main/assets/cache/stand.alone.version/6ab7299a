(function () {
    'use strict';

    class CommonData {
        constructor() {
            this.gameVersion = "1.0.4";
            this.lsUrl = "d3res/Conventional/ResScene.ls";
            this.lhUrl = "d3res/Conventional/ResScene.lh";
            this.lhPackHeadUrl = "d3pack/Conventional/";
            this.audioUrl = "res/audios/";
            this.audioType = ".mp3";
            this.isShowLoadLog = false;
            this.isShowStorageLog = false;
            this.isShowLogoTween = false;
            this.gameLogoUrl = "gameUI/load/logo.png";
            this.companyLogoUrl = "gameUI/load/companyLogo.png";
            this.companyLogoSize = 0.5;
            this.isDebug = false;
            this.isSubpackage = true;
            this.subpackageList = ["d3res"];
            this.playCount = 0;
            this.trySkinId = null;
            this.isClearVersion = false;
            this.keyBtnDownValue = [];
            this.useBuffId = null;
            this.isGameEnd = false;
            this.WallsPointList = [
                {
                    top: 2.5, bottom: -5.36, left: 3.24, right: -3.38
                },
                {
                    top: 2.37, bottom: -11.54, left: 3.35, right: -7.98
                },
                {
                    top: 2.37, bottom: -11.44, left: 3.46, right: -10.18
                },
                {
                    top: 2.37, bottom: -11.7, left: 3.46, right: -10.18
                },
                {
                    top: 2.37, bottom: -12, left: 3.46, right: -8
                },
                {
                    top: 2.37, bottom: -8.86, left: 3.46, right: -7.53
                },
                {
                    top: 2.37, bottom: -12, left: 3.46, right: -6.54
                },
                {
                    top: 2.37, bottom: -12, left: 3.46, right: -7.5
                },
                {
                    top: 2.37, bottom: -14.12, left: 3.46, right: -5.5
                },
                {
                    top: 2.37, bottom: -14.12, left: 3.46, right: -5.5
                },
                {
                    top: 2.37, bottom: -14.12, left: 3.46, right: -5.5
                },
                {
                    top: 2.37, bottom: -11.18, left: 3.46, right: -7.48
                },
                {
                    top: 2.37, bottom: -13.57, left: 3.46, right: -7.65
                },
                {
                    top: 2.37, bottom: -14.22, left: 3.46, right: -5.49
                },
                {
                    top: 2.37, bottom: -14.22, left: 3.46, right: -5.49
                },
                {
                    top: 2.37, bottom: -14.22, left: 3.46, right: -10.3
                },
                {
                    top: 2.37, bottom: -11.61, left: 3.46, right: -10.3
                },
                {
                    top: 2.37, bottom: -11.61, left: 3.46, right: -8.69
                },
                {
                    top: 2.37, bottom: -11.53, left: 3.46, right: -10.84
                },
                {
                    top: 2.37, bottom: -13.07, left: 3.46, right: -12.91
                },
                {
                    top: 2.37, bottom: -11.72, left: 3.46, right: -10.81
                },
                {
                    top: 2.37, bottom: -11.72, left: 3.46, right: -10.81
                },
                {
                    top: 2.37, bottom: -10.18, left: 3.46, right: -12.85
                },
                {
                    top: 2.37, bottom: -11, left: 3.46, right: -10.87
                },
                {
                    top: 2.37, bottom: -11, left: 3.46, right: -10.87
                },
                {
                    top: 2.37, bottom: -11.15, left: 3.46, right: -8.72
                },
                {
                    top: 2.37, bottom: -11.15, left: 3.46, right: -10.8
                },
                {
                    top: 2.37, bottom: -11.15, left: 3.46, right: -8.74
                },
                {
                    top: 2.37, bottom: -11.15, left: 3.46, right: -8.74
                },
                {
                    top: 2.37, bottom: -9.82, left: 3.46, right: -10.37
                },
                {
                    top: 2.37, bottom: -9.82, left: 3.46, right: -10.37
                },
                {
                    top: 2.37, bottom: -9.82, left: 3.46, right: -10.37
                },
                {
                    top: 2.37, bottom: -11.79, left: 3.46, right: -10.8
                },
                {
                    top: 2.37, bottom: -14.39, left: 3.46, right: -10.41
                },
                {
                    top: 2.37, bottom: -14.39, left: 3.46, right: -9
                },
                {
                    top: 2.37, bottom: -11, left: 3.46, right: -10.95
                },
                {
                    top: 2.37, bottom: -14.33, left: 3.46, right: -6.31
                },
                {
                    top: 2.37, bottom: -11.67, left: 3.46, right: -10.87
                },
                {
                    top: 2.37, bottom: -14.39, left: 3.46, right: -9
                },
            ];
            this.ChallengeWallsPointList = [
                {
                    top: 2.37, bottom: -9.82, left: 3.46, right: -10.37
                },
                {
                    top: 14.13, bottom: -20, left: 11.06, right: -12.53
                },
                {
                    top: 14.3, bottom: -19.04, left: 10.87, right: -12.23
                },
                {
                    top: 14.3, bottom: -19.04, left: 10.87, right: -12.23
                },
                {
                    top: 16, bottom: -18.31, left: 17.94, right: -19.8
                },
            ];
            this.moveChallengeRoleList2 = [
                [
                    { x: 9.19, y: 1, z: -18.58, angle: 90 },
                    { x: 1.93, y: 1, z: -18.58, angle: -90 },
                ],
                [
                    { x: -11.6, y: 1, z: 11, angle: 0 },
                    { x: -11.6, y: 1, z: 6.18, angle: 180 },
                ],
                [
                    { x: 0.12, y: 1, z: -6, angle: -90 },
                    { x: 0.12, y: 1, z: -9, angle: 180 },
                    { x: 0.12, y: 1, z: -6, angle: 0 },
                    { x: 6, y: 1, z: -6, angle: 90 },
                ],
            ];
            this.moveChallengeRoleList3 = [
                [
                    { x: 4.14, y: 1, z: -11.4, angle: 90 },
                    { x: -0.32, y: 1, z: -11.4, angle: 0 },
                    { x: 4.14, y: 1, z: -11.4, angle: 180 },
                    { x: 4.14, y: 1, z: -16.95, angle: -90 },
                ],
                [
                    { x: -11.86, y: 1, z: 11.52, angle: 0 },
                    { x: -11.86, y: 1, z: 5.72, angle: 180 },
                ],
                [
                    { x: 6.29, y: 1, z: 4, angle: 90 },
                    { x: 0, y: 1, z: 4, angle: -90 },
                ],
            ];
            this.moveChallengeRoleList4 = [
                [
                    { x: -11.98, y: 1, z: -12.74, angle: 90 },
                    { x: -11.98, y: 1, z: -17.57, angle: -90 },
                ],
                [
                    { x: -7.24, y: 1, z: -19, angle: -90 },
                    { x: 3, y: 1, z: -19, angle: 90 },
                ],
                [
                    { x: -10, y: 1, z: 2, angle: -90 },
                    { x: -2.86, y: 1, z: 2, angle: 90 },
                ],
            ];
            this.moveChallengeRoleList5 = [
                [
                    { x: -20, y: 1, z: -8, angle: 90 },
                    { x: -20, y: 1, z: -15, angle: -90 },
                ],
                [
                    { x: 13.6, y: 1, z: 16, angle: 90 },
                    { x: 6.38, y: 1, z: 16, angle: -90 },
                ],
                [
                    { x: 4.96, y: 1, z: -18, angle: -90 },
                    { x: 12.27, y: 1, z: -18, angle: 90 },
                ],
            ];
            this.moveRoleList5 = [
                [
                    { x: -7.24, y: 1, z: -7.4, angle: 180 },
                    { x: -7.24, y: 1, z: -4, angle: 0 },
                ],
            ];
            this.moveRoleList12 = [
                [
                    { x: 1.2, y: 1, z: 2, angle: 90 },
                    { x: -3.76, y: 1, z: 2, angle: -90 },
                ],
            ];
            this.moveRoleList13 = [
                [
                    { x: 1.74, y: 1, z: -3.58, angle: 90 },
                    { x: -6.63, y: 1, z: -3.58, angle: -90 },
                ],
            ];
            this.moveRoleList20 = [
                [
                    { x: -6.53, y: 1, z: -8.24, angle: 90 },
                    { x: -11.32, y: 1, z: -8.24, angle: -90 },
                ],
            ];
            this.moveRoleList25 = [
                [
                    { x: -5.91, y: 1, z: -5.53, angle: 90 },
                    { x: -5.91, y: 1, z: -9.11, angle: 180 },
                    { x: -9.29, y: 1, z: -9.11, angle: -90 },
                    { x: -5.91, y: 1, z: -9.11, angle: 90 },
                    { x: -5.91, y: 1, z: -5.53, angle: 0 },
                    { x: -9.29, y: 1, z: -5.53, angle: -90 },
                ],
            ];
            this.moveRoleList26 = [
                [
                    { x: -4.5, y: 1, z: -6.11, angle: -90 },
                    { x: -4.5, y: 1, z: -1.92, angle: 0 },
                    { x: -4.5, y: 1, z: -6.11, angle: 180 },
                    { x: -3.46, y: 1, z: -6.11, angle: 90 },
                ],
            ];
            this.moveRoleList27 = [
                [
                    { x: -8, y: 1, z: -5.22, angle: -90 },
                    { x: 0.76, y: 1, z: -5.22, angle: 90 },
                ],
            ];
            this.moveRoleList39 = [
                [
                    { x: 1.55, y: 1, z: -12.45, angle: 180 },
                    { x: -3.11, y: 1, z: -12.45, angle: -90 },
                    { x: 1.55, y: 1, z: -12.45, angle: 90 },
                    { x: 1.55, y: 1, z: -6.82, angle: 0 },
                ],
            ];
            this.moveCarList1 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -5.7, angleEuler: -180
                },
                {
                    z: -8, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList2 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -10.55, angleEuler: -180
                },
                {
                    z: -14.05, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList3 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13, angleEuler: -180
                },
                {
                    z: -14.05, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList4 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13, angleEuler: -180
                },
                {
                    z: -14.05, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList5 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -10.14, angleEuler: -180
                },
                {
                    z: -14.29, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList6 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -10, angleEuler: -180
                },
                {
                    z: -12, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList7 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -9.04, angleEuler: -180
                },
                {
                    z: -14.29, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList8 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -10, angleEuler: -180
                },
                {
                    z: -14.29, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList9 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -8.06, angleEuler: -180
                },
                {
                    z: -16.73, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList10 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -8.06, angleEuler: -180
                },
                {
                    z: -16.73, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList11 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -8.06, angleEuler: -180
                },
                {
                    z: -16.73, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList12 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -10.16, angleEuler: -180
                },
                {
                    z: -13.61, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList13 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -10.16, angleEuler: -180
                },
                {
                    z: -15.98, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList14 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -8, angleEuler: -180
                },
                {
                    z: -16.67, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList15 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -8, angleEuler: -180
                },
                {
                    z: -16.67, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList16 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -12.76, angleEuler: -180
                },
                {
                    z: -16.67, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList17 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -12.76, angleEuler: -180
                },
                {
                    z: -14.13, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList18 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -11.31, angleEuler: -180
                },
                {
                    z: -14.13, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList19 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.25, angleEuler: -180
                },
                {
                    z: -14.04, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList20 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -15.32, angleEuler: -180
                },
                {
                    z: -15.5, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList21 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.29, angleEuler: -180
                },
                {
                    z: -14.2, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList22 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.29, angleEuler: -180
                },
                {
                    z: -14.2, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList23 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -15.39, angleEuler: -180
                },
                {
                    z: -12.53, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList24 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.36, angleEuler: -180
                },
                {
                    z: -13.51, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList25 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.36, angleEuler: -180
                },
                {
                    z: -13.51, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList26 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -11.17, angleEuler: -180
                },
                {
                    z: -13.7, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList27 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.24, angleEuler: -180
                },
                {
                    z: -13.7, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList28 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -11.18, angleEuler: -180
                },
                {
                    z: -13.7, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList29 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -11.18, angleEuler: -180
                },
                {
                    z: -13.7, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList30 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -12.68, angleEuler: -180
                },
                {
                    z: -12.24, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList31 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -12.68, angleEuler: -180
                },
                {
                    z: -12.24, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList32 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -12.68, angleEuler: -180
                },
                {
                    z: -12.24, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList33 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.41, angleEuler: -180
                },
                {
                    z: -13.96, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList34 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -12.75, angleEuler: -180
                },
                {
                    z: -16.73, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList35 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -11.37, angleEuler: -180
                },
                {
                    z: -16.73, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList36 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.33, angleEuler: -180
                },
                {
                    z: -13.34, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList37 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -8.56, angleEuler: -180
                },
                {
                    z: -16.75, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList38 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -13.26, angleEuler: -180
                },
                {
                    z: -14.07, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveCarList39 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -11.37, angleEuler: -180
                },
                {
                    z: -16.73, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveChallengeCarList1 = [
                {
                    z: 5.3, angleEuler: -90
                },
                {
                    x: -12.68, angleEuler: -180
                },
                {
                    z: -12.24, angleEuler: 90
                },
                {
                    x: 5.8, angleEuler: 0
                },
                {
                    z: 3, openRail: true
                },
                {
                    z: 52,
                }
            ];
            this.moveChallengeCarList2 = [
                {
                    z: 17, angleEuler: -90
                },
                {
                    x: -15, angleEuler: -180
                },
                {
                    z: -21.5, angleEuler: 90
                },
                {
                    x: 13.5, angleEuler: 0
                },
                {
                    z: 18, openRail: true
                },
                {
                    z: 48,
                }
            ];
            this.moveChallengeCarList3 = [
                {
                    z: 16.6, angleEuler: -90
                },
                {
                    x: -14.8, angleEuler: -180
                },
                {
                    z: -21.5, angleEuler: 90
                },
                {
                    x: 13.5, angleEuler: 0
                },
                {
                    z: 18, openRail: true
                },
                {
                    z: 48,
                }
            ];
            this.moveChallengeCarList4 = [
                {
                    z: 16.6, angleEuler: -90
                },
                {
                    x: -14.8, angleEuler: -180
                },
                {
                    z: -21.5, angleEuler: 90
                },
                {
                    x: 13.5, angleEuler: 0
                },
                {
                    z: 18, openRail: true
                },
                {
                    z: 48,
                }
            ];
            this.moveChallengeCarList5 = [
                {
                    z: 18.63, angleEuler: -90
                },
                {
                    x: -22.57, angleEuler: -180
                },
                {
                    z: -20.33, angleEuler: 90
                },
                {
                    x: 20.52, angleEuler: 0
                },
                {
                    z: 18, openRail: true
                },
                {
                    z: 90,
                }
            ];
            this.challengeCameraInfo2 = {
                fov: 65,
                x: 7.5,
                y: 0,
                z: 12,
            };
            this.challengeCameraInfo3 = {
                fov: 65,
                x: 7.5,
                y: 0,
                z: 12,
            };
            this.challengeCameraInfo4 = {
                fov: 65,
                x: 7.5,
                y: 0,
                z: 12,
            };
            this.challengeCameraInfo5 = {
                fov: 88,
                x: 22,
                y: 0,
                z: 25,
            };
            this.spdFactor = 3;
            this.curGuideIndex = -1;
            this.levelType = 0;
            this.canUpdateColorCarTypeIdList = [1, 2];
            this.canShowBanner = false;
            this.levelTime = 0;
            this.stepNum = 0;
        }
    }

    var EventType;
    (function (EventType) {
        EventType[EventType["Platform_Wake_Event"] = 0] = "Platform_Wake_Event";
        EventType[EventType["Platform_Sleep_Event"] = 1] = "Platform_Sleep_Event";
        EventType[EventType["Load_Res_Event"] = 2] = "Load_Res_Event";
        EventType[EventType["Game_Init_Event"] = 3] = "Game_Init_Event";
        EventType[EventType["Game_Play_Event"] = 4] = "Game_Play_Event";
        EventType[EventType["Game_Over_Event"] = 5] = "Game_Over_Event";
        EventType[EventType["Game_Reborn_Event"] = 6] = "Game_Reborn_Event";
        EventType[EventType["Update_Coin_Event"] = 7] = "Update_Coin_Event";
        EventType[EventType["Update_Skin_Event"] = 8] = "Update_Skin_Event";
        EventType[EventType["Open_UI_Event"] = 9] = "Open_UI_Event";
        EventType[EventType["Close_UI_Event"] = 10] = "Close_UI_Event";
        EventType[EventType["Button_Click_Event"] = 11] = "Button_Click_Event";
        EventType[EventType["Button_DownUp_Event"] = 12] = "Button_DownUp_Event";
        EventType[EventType["Update_Buff_Event"] = 13] = "Update_Buff_Event";
        EventType[EventType["Update_CarNum_Event"] = 14] = "Update_CarNum_Event";
        EventType[EventType["Update_GameGuide_Event"] = 15] = "Update_GameGuide_Event";
        EventType[EventType["Update_LevelTime_Event"] = 16] = "Update_LevelTime_Event";
        EventType[EventType["Update_StepNum_Event"] = 17] = "Update_StepNum_Event";
    })(EventType || (EventType = {}));

    class StorageData {
        constructor() {
            this.score = 0;
            this.level = 1;
            this.coin = 0;
            this.gameCount = 0;
            this.isNewPlayer = true;
            this.freshTime = new Date().getTime() - 86400000;
            this.onlineTime = 0;
            this.getOnlineRewards = [false, false, false];
            this.isMusic = false;
            this.isSound = true;
            this.isVibrate = true;
            this.signDay = 1;
            this.signWeek = 1;
            this.isSign = false;
            this.skinList = [[1]];
            this.skinId = [1];
            this.skinLevel = [[1]];
            this.buffAmount = [0, 0, 0];
            this.challengeLevel = 1;
            this.guideStep = -1;
            this.carSkinId = 1;
            this.roleSkinId = 1;
            this.carSkins = [1];
            this.roleSkins = [1];
            this.curPtId = null;
            this.curPtSkin = [];
        }
    }

    class StorageManager {
        constructor() {
            this.storageData = new StorageData;
            this.storageKey = new StorageData;
            for (let key in this.storageData) {
                let jsonData = this.getStorage(key);
                if (!jsonData) {
                    this.setStorage(key, this.storageKey[key]);
                }
                else {
                    this.storageData[key] = JSON.parse(jsonData);
                }
                this.storageKey[key] = key;
                if (GlobalCtrl.CommonData.isShowStorageLog) {
                    console.log(!jsonData ? "初始化缓存数据===" : "加载缓存数据===", key, this.storageData[key]);
                }
            }
            this.updateData();
        }
        setStorage(key, value) {
            if (value == null) {
                value = this.storageData[key];
            }
            Laya.LocalStorage.setItem(key, JSON.stringify(value));
            this.storageData[key] = value;
        }
        getStorage(key) {
            return Laya.LocalStorage.getItem(key);
        }
        removeStorage(key) {
            Laya.LocalStorage.removeItem(key);
        }
        updateData() {
            var gameTime = Math.floor((this.storageData.freshTime) / 86400000);
            var curTime = Math.floor(new Date().getTime() / 86400000);
            if (gameTime != curTime) {
                this.setStorage(this.storageKey.gameCount, 0);
                this.setStorage(this.storageKey.freshTime, new Date().getTime());
                this.setStorage(this.storageKey.onlineTime, 0);
                this.setStorage(this.storageKey.getOnlineRewards, [false, false, false]);
                this.initSign();
                this.refreshDateFunction && this.refreshDateFunction();
            }
            Laya.timer.loop(1000, this, this.updateOnlineTime);
        }
        updateOnlineTime() {
            this.storageData.onlineTime++;
            if (this.storageData.onlineTime % 5 == 0) {
                this.setStorage(this.storageKey.onlineTime, this.storageData.onlineTime);
            }
        }
        musicSiwtch() {
            this.setStorage(this.storageKey.isMusic, !this.storageData.isMusic);
            return this.storageData.isMusic;
        }
        soundSiwtch() {
            this.setStorage(this.storageKey.isSound, !this.storageData.isSound);
            return this.storageData.isSound;
        }
        vibrateSiwtch() {
            this.setStorage(this.storageKey.isVibrate, !this.storageData.isVibrate);
            return this.storageData.isVibrate;
        }
        passLevel(isPass) {
            if (isPass) {
                this.setStorage(this.storageKey.level, this.storageData.level + 1);
            }
        }
        updateCoin(value, callback) {
            this.setStorage(this.storageKey.coin, this.storageData.coin + value);
            callback && callback(this.storageData.coin);
            GlobalCtrl.Event.event(EventType.Update_Coin_Event);
        }
        initSign() {
            this.setStorage(this.storageKey.isSign, false);
            if (this.storageData.signDay > 7) {
                this.setStorage(this.storageKey.signDay, 1);
                this.setStorage(this.storageKey.signWeek, this.storageData.signWeek + 1);
            }
        }
        sign(callback) {
            this.setStorage(this.storageKey.isSign, true);
            this.setStorage(this.storageKey.signDay, this.storageData.signDay + 1);
            callback && callback();
        }
        unlockSkin(id, type = 0) {
            if (!this.hasSkin(id, type)) {
                this.storageData.skinList[type].push(id);
                this.setStorage(this.storageKey.skinList, this.storageData.skinList);
                this.changeSkin(id, type);
            }
        }
        hasSkin(id, type = 0) {
            return this.storageData.skinList[type].indexOf(id) != -1;
        }
        changeSkin(id, type = 0, callback) {
            this.storageData.skinId[type] = id;
            this.setStorage(this.storageKey.skinId, this.storageData.skinId);
            callback && callback();
            GlobalCtrl.Event.event(EventType.Update_Skin_Event, { id: id, type: type });
        }
        curSkin(type = 0) {
            return this.storageData.skinId[type];
        }
        getSkinLevel(id, type = 0) {
            let index = this.storageData.skinLevel[type].indexOf(id);
            return index != -1 ? this.storageData.skinLevel[type][index] : 1;
        }
        upgradeLevel(id, type = 0) {
            let index = this.storageData.skinLevel[type].indexOf(id);
            if (!this.storageData.skinLevel[type][index]) {
                this.storageData.skinLevel[type][index] = 1;
            }
            this.storageData.skinLevel[type][index]++;
            this.setStorage(this.storageKey.skinLevel, this.storageData.skinLevel);
        }
    }

    class EventManager {
        constructor() {
            this.eventDispatcher = new Laya.EventDispatcher;
            for (var prop in EventType) {
                if (prop.length > 1)
                    continue;
                Event[EventType[prop]] = EventType[prop];
            }
        }
        getTypeKey(type) {
            let key = Event[EventType[type]];
            if (!key)
                key = type;
            return key;
        }
        on(type, caller, listener, args) {
            this.eventDispatcher.on(this.getTypeKey(type), caller, listener, args);
        }
        once(type, caller, listener, args) {
            this.eventDispatcher.once(this.getTypeKey(type), caller, listener, args);
        }
        off(type, caller, listener, onceonly) {
            this.eventDispatcher.off(this.getTypeKey(type), caller, listener, onceonly);
        }
        offAll(type) {
            this.eventDispatcher.offAll(this.getTypeKey(type));
        }
        offAllCaller(caller) {
            this.eventDispatcher.offAllCaller(caller);
        }
        event(type, data) {
            this.eventDispatcher.event(this.getTypeKey(type), data);
        }
        hasListener(type) {
            this.eventDispatcher.hasListener(this.getTypeKey(type));
        }
        isMouseEvent(type) {
            this.eventDispatcher.isMouseEvent(this.getTypeKey(type));
        }
    }
    class Event {
    }

    class ResourcesManager {
        constructor(errorListener) {
            this.currentTag = "资源加载中";
            this.tagList = [];
            if (errorListener) {
                this.errorCallback = errorListener;
            }
        }
        get CurrentTag() {
            return this.currentTag;
        }
        get getTagCount() {
            return this.tagList.length;
        }
        load(path, callBack, progress, tag, autoGet = true) {
            if (tag) {
                this.addLoadTag(tag);
            }
            Laya.loader.create(path, Laya.Handler.create(this, () => {
                if (callBack) {
                    if (typeof path == "string" && autoGet) {
                        callBack(Laya.loader.getRes(path));
                    }
                    else if (path.length == 1 && autoGet) {
                        callBack(Laya.loader.getRes(path[0]));
                    }
                    else {
                        callBack(path);
                    }
                    if (tag) {
                        this.removeLoadTag(tag);
                    }
                }
            }), Laya.Handler.create(this, (args) => {
                if (GlobalCtrl.CommonData.isShowLoadLog) {
                    console.log("资源加载中：", args);
                }
                progress && progress(args);
            }));
            Laya.loader.on(Laya.Event.ERROR, this, (err) => {
                console.error("资源加载失败", err);
                this.errorCallback && this.errorCallback(err);
            });
        }
        addLoadTag(tag) {
            if (this.tagList.indexOf(tag) == -1) {
                this.tagList.push(tag);
                if (this.currentTag == "资源加载中") {
                    this.currentTag = tag;
                    this.updateLoadTag(tag, 0, false);
                }
            }
        }
        removeLoadTag(tag) {
            if (this.tagList.indexOf(tag) != -1) {
                this.tagList.splice(this.tagList.indexOf(tag), 1);
                this.updateLoadTag(tag, 1, true);
                Laya.timer.once(100, this, () => {
                    if (this.tagList.length > 0) {
                        this.currentTag = this.tagList[0];
                        this.updateLoadTag(this.currentTag, 0, false);
                    }
                    else {
                        GlobalCtrl.Event.event(EventType.Load_Res_Event, { loadFinish: true });
                        this.currentTag = "";
                    }
                });
            }
        }
        updateLoadTag(tag, progress, isComplete) {
            GlobalCtrl.Event.event(EventType.Load_Res_Event, { tag: tag, progress: progress, isComplete: isComplete });
        }
    }

    var AudioType;
    (function (AudioType) {
        AudioType["Bgm"] = "FirstInGame";
        AudioType["Click"] = "Click";
        AudioType["Bomb"] = "Bomb";
        AudioType["CarEngine"] = "CarEngine";
        AudioType["CarHitWall"] = "CarHitWall";
        AudioType["CarHit"] = "CarHit";
        AudioType["CarHitWoman"] = "CarHitWoman";
        AudioType["WomanSound"] = "WomanSound";
        AudioType["Fail"] = "Fail";
        AudioType["CarMove"] = "CarMove";
        AudioType["Win"] = "Win";
        AudioType["CarPass"] = "CarPass";
    })(AudioType || (AudioType = {}));

    class AudioManager {
        constructor() {
            this.audioPath = GlobalCtrl.CommonData.audioUrl;
            this.audioType = GlobalCtrl.CommonData.audioType;
            this.audioList = {};
            this.singletonList = [];
            for (var audioName in AudioType) {
                let audioFile = AudioType[audioName];
                let channel = new Laya.SoundChannel;
                channel.url = this.audioPath + audioFile + this.audioType;
                Laya.SoundManager.addChannel(channel);
                this.audioList[audioFile] = true;
                if (audioFile == AudioType.Bgm) {
                    Laya.loader.load(channel.url);
                }
            }
        }
        checkAudio(audioName) {
            if (!this.audioList[audioName]) {
                console.error("未找到该音频文件,请确保路径正确。");
                return false;
            }
            return true;
        }
        setMusicVolume(volume) {
            Laya.SoundManager.setMusicVolume(volume);
        }
        setSoundVolume(volume, audioName) {
            if (!audioName || (audioName && this.checkAudio(audioName))) {
                Laya.SoundManager.setSoundVolume(volume, audioName);
            }
        }
        playMusic(audioName = AudioType.Bgm) {
            if (this.checkAudio(audioName) && GlobalCtrl.StorageData.isMusic) {
                this.musicChannel = Laya.SoundManager.playMusic(this.audioPath + audioName + this.audioType);
            }
        }
        stopMusic() {
            Laya.SoundManager.stopMusic();
        }
        resumeMusic() {
            this.musicChannel.resume();
        }
        playSound(audioName, loops = 1, volume, cb) {
            if (this.checkAudio(audioName) && GlobalCtrl.StorageData.isSound) {
                if (volume) {
                    this.setSoundVolume(volume, audioName);
                }
                Laya.SoundManager.playSound(this.audioPath + audioName + this.audioType, loops, Laya.Handler.create(this, () => {
                    cb && cb();
                }));
            }
        }
        playSingletonSound(audioName, volume, delayTime) {
            if (this.singletonList.indexOf(audioName) != -1) {
                return;
            }
            var removeItem = () => {
                this.singletonList.splice(this.singletonList.indexOf(audioName), 1);
            };
            this.singletonList.push(audioName);
            if (delayTime != null) {
                this.playSound(audioName, 1, volume);
                Laya.timer.once(delayTime, this, removeItem);
            }
            else {
                this.playSound(audioName, 1, volume, removeItem);
            }
        }
        stopSound(audioName) {
            if (this.checkAudio(audioName)) {
                Laya.SoundManager.stopSound(this.audioPath + audioName + this.audioType);
            }
        }
    }

    var UIType;
    (function (UIType) {
        UIType["LoadUI"] = "uiScenes/LoadUI.scene";
        UIType["HomeUI"] = "uiScenes/HomeUI.scene";
        UIType["GameUI"] = "uiScenes/GameUI.scene";
        UIType["OverUI"] = "uiScenes/OverUI.scene";
        UIType["UpgradeUI"] = "uiScenes/UpgradeUI.scene";
        UIType["SetUI"] = "uiScenes/SetUI.scene";
        UIType["GetBuffUI"] = "uiScenes/GetBuffUI.scene";
        UIType["SkinUI"] = "uiScenes/SkinUI.scene";
        UIType["FailUI"] = "uiScenes/FailUI.scene";
        UIType["VictoryUI"] = "uiScenes/VictoryUI.scene";
        UIType["PuzzleUI"] = "uiScenes/PuzzleUI.scene";
        UIType["PuzzleUI1"] = "uiScenes/PuzzleUI1.scene";
        UIType["GetCoinUI"] = "uiScenes/GetCoinUI.scene";
        UIType["DifficultySurgeUI"] = "uiScenes/DifficultySurgeUI.scene";
    })(UIType || (UIType = {}));

    class UIManager {
        constructor() {
            this.sceneList = [];
        }
        get TopScene() {
            return this.topScene;
        }
        set TopScene(scene) {
            this.topScene = scene;
            this.sceneList[0] = scene;
        }
        getSceneByUrl(url) {
            if (this.sceneList.length > 0) {
                for (let i = 0; i < this.sceneList.length; i++) {
                    if (this.sceneList[i].url == url) {
                        return this.sceneList[i];
                    }
                }
            }
        }
        openScene(url, closeOther = true, param, complete, parent) {
            if (closeOther) {
                for (let i = this.sceneList.length - 1; i >= 0; i--) {
                    this.closeScene(this.sceneList[i].url);
                }
            }
            else {
                let scene = this.sceneList.filter(w => { return w.url == url; });
                if (scene && scene.length > 0) {
                    this.closeScene(url);
                }
            }
            closeOther = url == UIType.GameUI;
            let handler = new Laya.Handler(this, scene => {
                if (!scene) {
                    return;
                }
                parent && parent.addChild(scene);
                this.sceneList.push(scene);
                this.topScene = scene;
                complete && complete(scene);
                GlobalCtrl.Event.event(EventType.Open_UI_Event, scene);
                handler.recover();
            }, null, false);
            Laya.Scene.open(url, closeOther, param, handler);
        }
        closeScene(url) {
            if (url) {
                let scenes = this.sceneList.filter(w => { return w.url == url; });
                var scene = (scenes && scenes.length > 0) ? scenes[0] : null;
            }
            else {
                scene = this.topScene ? this.topScene : null;
            }
            if (scene) {
                this.sceneList.splice(this.sceneList.indexOf(scene), 1);
                this.topScene = this.sceneList.length > 0 ? this.sceneList[this.sceneList.length - 1] : null;
                scene.close();
                GlobalCtrl.Event.event(EventType.Close_UI_Event, scene);
            }
        }
    }

    class Base2dComponent extends Laya.Script {
        onAwake() {
            this.self = this.owner;
            this.init();
        }
        init(...data) { }
        onDestroy() {
            Laya.timer.clearAll(this);
            GlobalCtrl.Event.offAllCaller(this);
        }
    }

    class KeyMouseEvent extends Base2dComponent {
        onMouseDown(e) {
        }
        onMouseMove(e) {
        }
        onMouseOut(e) {
        }
        onMouseUp(e) {
        }
        onMouseOver(e) {
        }
        onClick(e) {
        }
        onKeyDown(e) {
            let type = this.hasKeyDown(e.keyCode);
            if (type) {
                GlobalCtrl.Event.event(EventType.Button_Click_Event, { type: type, isDown: true });
            }
        }
        onKeyUp(e) {
            let type = this.hasKeyDown(e.keyCode);
            if (type) {
                GlobalCtrl.Event.event(EventType.Button_Click_Event, { type: type, isDown: false });
            }
        }
        hasKeyDown(keyCode) {
            for (let i = 0; i < GlobalCtrl.CommonData.keyBtnDownValue.length; i++) {
                if (GlobalCtrl.CommonData.keyBtnDownValue[i][0] == keyCode) {
                    return GlobalCtrl.CommonData.keyBtnDownValue[i][1];
                }
            }
            return null;
        }
    }

    var PrefabType;
    (function (PrefabType) {
        PrefabType["InfoToast"] = "prefab/infoToast.prefab";
    })(PrefabType || (PrefabType = {}));

    class PrefabManager {
        constructor() {
            let url = [];
            for (let prefab in PrefabType) {
                url.push(PrefabType[prefab]);
            }
            if (url.length > 0) {
                GlobalCtrl.Res.addLoadTag("预制体");
                Laya.loader.load(url, Laya.Handler.create(this, this.loadComplete), Laya.Handler.create(this, this.loadProgress), Laya.Loader.PREFAB);
            }
        }
        loadProgress(res) {
            console.log("预制体资源加载中...", res);
        }
        loadComplete() {
            console.log("预制体资源加载完成!");
            GlobalCtrl.Res.removeLoadTag("预制体");
        }
        getItem(name) {
            let prefab = Laya.loader.getRes(name);
            if (prefab) {
                return Laya.Pool.getItemByCreateFun(name, prefab.create, prefab);
            }
            else {
                console.warn("预制体加载失败：确认是否已添加PrefabType成员");
                return null;
            }
        }
        recoverItem(name, item) {
            Laya.Pool.recover(name, item);
            item.parent.removeChild(item);
        }
    }

    class GlobalCtrl {
        static initFrameworks() {
            this.CommonData = new CommonData;
            this.Storage = new StorageManager;
            this.Event = new EventManager;
            this.Audio = new AudioManager;
            this.Res = new ResourcesManager;
            this.UI = new UIManager;
            this.Prefab = new PrefabManager;
            this.showLoadUI();
            this.initKeyMouseEvent();
        }
        static showLoadUI() {
            this.UI.openScene(UIType.LoadUI, false, {
                isShowLogoTween: this.CommonData.isShowLogoTween,
                gameLogoUrl: this.CommonData.gameLogoUrl,
                companyLogoUrl: this.CommonData.companyLogoUrl,
                logoSize: this.CommonData.companyLogoSize
            });
        }
        static initKeyMouseEvent() {
            if (Laya.Browser.onPC) {
                let sprite = new Laya.Sprite;
                Laya.stage.addChild(sprite);
                sprite.addComponent(KeyMouseEvent);
            }
        }
        static get StorageData() {
            return this.Storage.storageData;
        }
        static get StorageKey() {
            return this.Storage.storageKey;
        }
        static get IsStartGame() {
            return this._isStartGame;
        }
        static set IsStartGame(value) {
            this._isStartGame = value;
        }
    }
    GlobalCtrl._isStartGame = false;

    class SGConfigData {
        constructor() {
            this.version = '1.0.99';
            this.deny_allowMistouch = '北京,上海,深圳,广州,长沙';
            this.allowMistouch = 1;
            this.channel_ditch = 0;
            this.sceneList = '1095,1058,1045,1046,1067,1084,1144,1091,1152,1089,1001,1007,1038,1037';
            this.front_banner_ids = '';
            this.front_video_ids = '';
            this.front_chaping_ids = '';
            this.front_box_ids = '';
            this.front_more_gezi_ids = '';
            this.front_duilian_gezi_ids = '';
            this.front_dangezi_ids = '';
            this.front_duogezi_ids = '';
            this.front_more_dangezi_ids = '';
            this.front_bottom_duogezi_ids = '';
            this.front_small_remen_number = 2;
            this.front_tuijian_remen_number = 2;
            this.front_box_dangezi_number = 2;
            this.front_box_level = 1;
            this.front_box_level_interval = 1;
            this.front_game_remen_number = 2;
            this.front_box_second_number = 2;
            this.front_box_second_level = 1;
            this.front_box_second_level_interval = 1;
            this.front_order_remen_number = 2;
            this.front_more_gezi_time = 30000;
            this.front_more_gezi_refresh_num = 5;
            this.front_box_dangezi_time = 30000;
            this.front_box_dangezi_refresh_num = 5;
            this.front_gezi_time = 800;
            this.remenBanner_count = 1;
            this.refresh_banner_time = 5;
            this.updateBanner = 3;
            this.front_gezi_number = 1;
            this.front_box_before_times = 1;
            this.front_box_dangezi_times = 1;
            this.front_box_second_times = 1;
            this.front_small_remen_switch = 0;
            this.front_small_wuchu_switch = 0;
            this.front_box_before_switch = 1;
            this.front_side_switch = 1;
            this.front_more_haowan_switch = 1;
            this.front_tuijian_remen_switch = 1;
            this.front_tuijian_wuchu_switch = 1;
            this.front_box_dangezi_switch = 1;
            this.front_game_banner_switch = 1;
            this.front_game_dangezi_switch = 1;
            this.front_game_remen_switch = 1;
            this.front_game_wuchu_switch = 1;
            this.front_chaping_remen_switch = 1;
            this.front_box_second_switch = 1;
            this.front_jiesuanye_duogezi_switch = 1;
            this.front_jiesuanye_dangezi_switch = 1;
            this.front_order_remen_switch = 1;
            this.front_order_wuchu_switch = 1;
            this.front_chaping_home_switch = 1;
            this.front_leave_return_switch = 1;
            this.front_video_double_switch = 1;
            this.front_all_banner_switch = 1;
            this.front_hide_remenbtn_time = 500;
            this.front_show_amount_chance = 1;
            this.front_magnet_time = 5;
            this.front_all_magnet_switch = 1;
            this.front_page_chaping_switch = 1;
            this.front_game_duogezi_switch = 1;
            this.front_game_duogezi_time = 30;
            this.front_game_duogezi_hide_time = 5;
            this.front_bottom_duogezi_switch = 1;
            this.front_video_change_switch = 1;
            this.front_inner_spd = 3;
            this.front_outer_spd = 70;
        }
    }

    class SGConfig {
        static getServerConfig(cb) {
            let url = "https://shanguang-1257569587.cos.ap-guangzhou.myqcloud.com/Wx/" + this._wx.getAccountInfoSync().miniProgram.appId + ".json";
            let xhr = new XMLHttpRequest();
            xhr.onreadystatechange = () => {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        var response = xhr.responseText;
                        cb(JSON.parse(response));
                    }
                    else {
                        cb(null);
                    }
                }
            };
            xhr.onerror = (evt) => {
                console.log('获取后台配置失败：', evt);
                if (this.errorCount > 3) {
                    cb(null);
                }
                else {
                    this.errorCount++;
                    Laya.timer.once(1000, this, () => {
                        this.getServerConfig(cb);
                    });
                }
            };
            xhr.open("GET", url, true);
            xhr.send();
        }
        static initConfigData(cb) {
            let channel = this._wx.getLaunchOptionsSync().query.channel;
            if (channel) {
                localStorage.setItem('channel', channel);
            }
            this.getServerConfig((data) => {
                if (data) {
                    console.log('参数Data:', data);
                    let d = data;
                    for (let key in this.data) {
                        if (d[key] != undefined) {
                            let str = '' + d[key];
                            if (!isNaN(Number(str))) {
                                this.data[key] = Number(d[key]);
                            }
                            else {
                                this.data[key] = d[key];
                            }
                        }
                    }
                }
                if (this.data.version.split('.')[2] < this.version.split('.')[2]) {
                    this.data.allowMistouch = 0;
                    for (let key in this.data) {
                        if (key.search('_switch') != -1)
                            this.data[key] = 0;
                    }
                    console.log('参数:', this.data);
                    cb && cb();
                }
                else {
                    this.checkCitys(this.data.deny_allowMistouch.split(','), (v) => {
                        if (v)
                            this.data.allowMistouch = 0;
                        let channel = localStorage.getItem('channel') || this._wx.getLaunchOptionsSync().query.channel;
                        if (!this.data.allowMistouch || !this.allowScene || (this.data.channel_ditch && !channel)) {
                            this.data.front_box_before_switch = 0;
                            this.data.front_box_second_switch = 0;
                            this.data.front_order_wuchu_switch = 0;
                            this.data.front_box_dangezi_switch = 0;
                            this.data.front_game_wuchu_switch = 0;
                            this.data.front_tuijian_wuchu_switch = 0;
                            this.data.front_small_wuchu_switch = 0;
                            this.data.front_video_double_switch = 0;
                            this.data.front_all_banner_switch = 0;
                        }
                        console.log('参数:', this.data);
                        cb && cb();
                    });
                }
            });
        }
        static checkCitys(cityList, cb) {
            let isCall = false;
            let timeId = setTimeout(() => {
                func("深圳");
            }, 4000);
            let func = (cityObj) => {
                if (isCall)
                    return;
                isCall = true;
                clearTimeout(timeId);
                if (!cityList) {
                    cb && cb(false);
                    return;
                }
                const area = cityObj;
                console.log('city', area);
                for (let i = cityList.length - 1; i >= 0; i--) {
                    const city = cityList[i];
                    if (area.indexOf(city) !== -1) {
                        cb && cb(true);
                        return;
                    }
                }
                cb && cb(false);
            };
            let url = 'https://ip.tool.lu';
            let xhr = new XMLHttpRequest();
            xhr.onreadystatechange = () => {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        var resp = xhr.responseText;
                        let str = resp;
                        str = str.split(" ").join("");
                        func(str.split(":")[2]);
                    }
                    else {
                        func('深圳市');
                    }
                }
            };
            xhr.ontimeout = () => {
                console.log('获取地区失败：超时');
                func('深圳市');
            };
            xhr.onerror = (evt) => {
                console.log('获取地区失败：', evt);
                func('深圳市');
            };
            xhr.open("GET", url, true);
            xhr.setRequestHeader("Content-type", "application/json;charset=utf-8");
            xhr.send();
        }
        static get allowScene() {
            if (this.isWechat && this.data.sceneList) {
                var launchInfo = this._wx.getLaunchOptionsSync();
                let scene = launchInfo.scene.toString();
                let arr = this.data.sceneList.split(',');
                return arr.indexOf(scene) != -1;
            }
            return true;
        }
    }
    SGConfig.version = '1.0.0';
    SGConfig.isPortrait = true;
    SGConfig.isShowHomeBanner = true;
    SGConfig.isShowShopBanner = true;
    SGConfig.data = new SGConfigData;
    SGConfig._wx = Laya.Browser.window['wx'];
    SGConfig.isWechat = Laya.Browser.onWeiXin;
    SGConfig.errorCount = 0;

    class SGAD {
        static inidAd(cb) {
            if (!Laya.Browser.onWeiXin) {
                cb && cb();
                return;
            }
            ;
            this.bannerIds = SGConfig.data.front_banner_ids.split(',');
            this.videoIds = SGConfig.data.front_video_ids.split(',');
            this.interstitialIds = SGConfig.data.front_chaping_ids.split(',');
            this.fullGridIds = SGConfig.data.front_more_gezi_ids.split(',');
            this.fullSingleGridIds = SGConfig.data.front_more_dangezi_ids.split(',');
            this.sideGridIds = SGConfig.data.front_duilian_gezi_ids.split(',');
            this.boxGridIds = SGConfig.data.front_box_ids.split(',');
            this.gameGridIds = SGConfig.data.front_dangezi_ids.split(',');
            this.bannerIds = this.shuffleArr(this.bannerIds);
            this.videoIds = this.shuffleArr(this.videoIds);
            this.interstitialIds = this.shuffleArr(this.interstitialIds);
            this.fullGridIds = this.shuffleArr(this.fullGridIds);
            this.fullSingleGridIds = this.shuffleArr(this.fullSingleGridIds);
            this.sideGridIds = this.shuffleArr(this.sideGridIds);
            this.boxGridIds = this.shuffleArr(this.boxGridIds);
            this.gameGridIds = this.shuffleArr(this.gameGridIds);
            this.initGridAD();
            this.initBanner();
            this.createVideoAd();
            this.createInterstitialAd();
            let func = () => {
                if (this.isFullGridAdLoaded) {
                    Laya.timer.clear(this, func);
                    cb && cb();
                }
            };
            Laya.timer.loop(100, this, func);
        }
        static getSystemInfoSync() {
            if (!Laya.Browser.onWeiXin)
                return;
            if (!this.sysInfo) {
                this.sysInfo = Laya.Browser.window['wx'].getSystemInfoSync();
            }
            return this.sysInfo;
        }
        static initBanner() {
            if (!Laya.Browser.onWeiXin)
                return;
            this.bannerAds = [];
            this.bannerIndex = 0;
            this.bannerTimesArr = [];
            this.bannerShowCount = [];
            this.bannerErrorArr = [];
            for (let i = 0; i < this.bannerIds.length; i++) {
                this.bannerTimesArr.push(0);
                this.bannerShowCount.push(0);
                this.bannerErrorArr.push(false);
            }
            for (let i = 0; i < this.bannerIds.length; i++) {
                let bannerAd = this.createBannerAd(i);
                this.bannerAds.push(bannerAd);
            }
        }
        static get isAllBannerError() {
            let isAllError = true;
            for (let i = 0; i < this.bannerErrorArr.length; i++) {
                if (!this.bannerErrorArr[i]) {
                    isAllError = false;
                    break;
                }
            }
            return isAllError;
        }
        static showBannerAd(mustShow = false) {
            if (!Laya.Browser.onWeiXin)
                return;
            if (!SGConfig.data.front_all_banner_switch && !mustShow) {
                return;
            }
            if (this.isAllBannerError) {
                this.stopCountBannerTime();
                this.initBanner();
                return;
            }
            for (let i = 0; i < this.bannerErrorArr.length; i++) {
                if (this.bannerErrorArr[this.bannerIndex]) {
                    this.bannerIndex++;
                    if (this.bannerIndex >= this.bannerIds.length)
                        this.bannerIndex = 0;
                }
                else {
                    break;
                }
            }
            this.bannerAds[this.bannerIndex] && this.bannerAds[this.bannerIndex].show();
            this.stopCountBannerTime();
            Laya.timer.loop(100, this, this.countBannerTime, [mustShow]);
        }
        static hideBannerAd() {
            if (!Laya.Browser.onWeiXin)
                return;
            if (this.isAllBannerError) {
                this.stopCountBannerTime();
                return;
            }
            this.bannerAds[this.bannerIndex] && this.bannerAds[this.bannerIndex].hide();
            this.stopCountBannerTime();
        }
        static countBannerTime(mustShow = false) {
            this.bannerTimesArr[this.bannerIndex] += 0.1;
            if (this.bannerTimesArr[this.bannerIndex] >= SGConfig.data.refresh_banner_time) {
                this.bannerAds[this.bannerIndex] && this.bannerAds[this.bannerIndex].hide();
                this.bannerTimesArr[this.bannerIndex] = 0;
                this.bannerShowCount[this.bannerIndex]++;
                if (this.bannerShowCount[this.bannerIndex] >= SGConfig.data.updateBanner) {
                    this.bannerShowCount[this.bannerIndex] = 0;
                    this.bannerAds[this.bannerIndex] && this.bannerAds[this.bannerIndex].destroy();
                    this.bannerAds[this.bannerIndex] = null;
                    this.bannerAds[this.bannerIndex] = this.createBannerAd(this.bannerIndex);
                }
                this.bannerIndex++;
                if (this.bannerIndex >= this.bannerIds.length)
                    this.bannerIndex = 0;
                this.showBannerAd(mustShow);
            }
        }
        static stopCountBannerTime() {
            Laya.timer.clear(this, this.countBannerTime);
        }
        static createBannerAd(index) {
            if (!Laya.Browser.onWeiXin)
                return;
            let sysInfo = this.getSystemInfoSync();
            let bannerAd = Laya.Browser.window['wx'].createBannerAd({
                adUnitId: this.bannerIds[index],
                style: {
                    top: sysInfo.screenHeight * 0.8,
                    width: 10,
                    left: sysInfo.screenWidth / 2 - 150
                },
                adIntervals: 30
            });
            bannerAd.onLoad(() => {
                this.bannerErrorArr[index] = false;
                console.log("Banner广告加载成功");
            });
            bannerAd.onError(err => {
                this.bannerErrorArr[index] = true;
                console.error("Banner广告加载失败", JSON.stringify(err));
            });
            bannerAd.onResize(res => {
                let realHeight = bannerAd.style.realHeight + 0.1;
                bannerAd.style.top = sysInfo.screenHeight - realHeight;
            });
            return bannerAd;
        }
        static createVideoAd(autoShow = false) {
            if (Laya.Browser.onWeiXin) {
                var self = this;
                var videoAd = this.videoAd;
                if (videoAd != null) {
                    videoAd.offLoad(onLoadVideo);
                    videoAd.offError(onErrorVideo);
                    videoAd.offClose(onCloseVideo);
                }
                var videoAd = Laya.Browser.window['wx'].createRewardedVideoAd({ adUnitId: self.videoIds[0] });
                videoAd.onLoad(onLoadVideo);
                videoAd.onError(onErrorVideo);
                videoAd.onClose(onCloseVideo);
                this.videoAd = videoAd;
            }
            function onLoadVideo() {
                console.log('video 加载成功');
                self.isExistVideoAd = true;
                if (autoShow) {
                    videoAd.show();
                }
            }
            function onErrorVideo(err) {
                console.error('video 加载错误', err);
                self.isExistVideoAd = false;
            }
            function onCloseVideo(res) {
                let isEnded = (res && res.isEnded || res === undefined) ? true : false;
                if (isEnded) {
                    self.videoFinishCallback && self.videoFinishCallback();
                    self.videoFinishCallback = null;
                }
                else {
                    self.videoCancelCallback && self.videoCancelCallback();
                    self.videoCancelCallback = null;
                }
                self.videoCompleteCallback && self.videoCompleteCallback();
                self.videoCompleteCallback = null;
            }
        }
        static showVideoAd(finishCB, cancelCB, completeCB, errorFinish = false) {
            if (!Laya.Browser.onWeiXin) {
                finishCB && finishCB();
                cancelCB && cancelCB();
                completeCB && completeCB();
                return;
            }
            if (!Laya.Browser.onWeiXin)
                return;
            let self = this;
            this.videoFinishCallback = finishCB;
            this.videoCancelCallback = cancelCB;
            this.videoCompleteCallback = completeCB;
            if (!this.isExistVideoAd) {
                this.createVideoAd();
            }
            if (Laya.Browser.onWeiXin) {
                var videoAd = this.videoAd;
                videoAd.show().then(() => { }).catch(err => {
                    videoAd.load().then(() => videoAd.show()).catch(err => {
                        self.videoCompleteCallback && self.videoCompleteCallback();
                        self.videoCompleteCallback = null;
                        if (!errorFinish && this.videoFinishCallback) {
                            Laya.Browser.window['wx'].showToast({
                                title: '暂无视频',
                                duration: 2000
                            });
                        }
                        if (errorFinish && this.videoFinishCallback) {
                            this.videoFinishCallback && this.videoFinishCallback();
                            this.videoFinishCallback = null;
                            Laya.Browser.window['wx'].showToast({
                                title: '已获得奖励',
                                duration: 2000
                            });
                        }
                    });
                });
            }
        }
        static destroyVideoAd() {
            if (!this.videoAd)
                return;
            this.videoAd.destroy();
            this.videoAd = null;
        }
        static initGridAD() {
            if (!Laya.Browser.onWeiXin) {
                return;
            }
            this.createFullGrid();
            this.createFullSingleGrid();
            this.createSideGrid();
            this.createMidBoxGrid();
            this.createFirstBoxGrid();
            this.createSecondBoxGrid();
            this.createGameGrid();
            this.initBottomGridAd();
        }
        static createFullGrid() {
            if (!Laya.Browser.onWeiXin)
                return;
            let loadCount = 0;
            let count = this.fullGridIds.length;
            let style = {};
            for (let i = 0; i < count; i++) {
                if (SGConfig.isPortrait) {
                    style = {
                        left: 0,
                        top: this.getSystemInfoSync().screenHeight / 2 - this.getSystemInfoSync().screenWidth / 2 - 50,
                        width: this.getSystemInfoSync().screenWidth
                    };
                }
                else {
                    style = {
                        left: (this.getSystemInfoSync().screenWidth / 2 - 300) + Math.floor(i % 2) * 300,
                        top: 30,
                        width: 10,
                        height: 10
                    };
                }
                let fullGridAd = Laya.Browser.window.wx.createCustomAd({
                    adUnitId: this.fullGridIds[i],
                    adIntervals: 30,
                    style: style
                });
                fullGridAd.onError((err) => {
                    loadCount++;
                    if (loadCount >= count)
                        this.isFullGridAdLoaded = true;
                    console.log('全屏格子加载失败:', JSON.stringify(err));
                });
                fullGridAd.onLoad(() => {
                    loadCount++;
                    if (loadCount >= count)
                        this.isFullGridAdLoaded = true;
                    this.fullGridAd.push(fullGridAd);
                });
                fullGridAd.onClose(() => {
                    this.closeFullGridAdCallback();
                });
            }
        }
        static visibleFullGridAd(v = true) {
            if (!Laya.Browser.onWeiXin || this.fullGridAd.length <= 0)
                return;
            if (v) {
                if (SGConfig.isPortrait) {
                    this.fullGridAd[this.fullGridCurIndex].show();
                }
                else {
                    let id1 = this.fullGridCurIndex * 2;
                    if (id1 >= this.fullGridAd.length) {
                        id1 = 0;
                        this.fullGridCurIndex = 0;
                    }
                    this.fullGridAd[id1].show();
                    let id2 = id1 + 1;
                    if (id2 < this.fullGridAd.length)
                        this.fullGridAd[id2].show();
                }
                this.fullGridShowCount++;
                if (this.fullGridShowCount >= SGConfig.data.front_more_gezi_refresh_num) {
                    this.fullGridShowCount = 0;
                    this.fullGridCurIndex++;
                    if (this.fullGridCurIndex >= this.fullGridAd.length)
                        this.fullGridCurIndex = 0;
                }
            }
            else {
                for (let i = 0; i < this.fullGridAd.length; i++) {
                    v ? this.fullGridAd[i].show() : this.fullGridAd[i].hide();
                }
            }
        }
        static createSideGrid() {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < 2; i++) {
                let id = i < this.sideGridIds.length ? i : this.sideGridIds.length - 1;
                if (this.sideGridAd.length <= 0) {
                    let grid = Laya.Browser.window['wx'].createCustomAd({
                        adUnitId: this.sideGridIds[id],
                        adIntervals: 30,
                        style: {
                            left: i == 0 ? 0 : this.getSystemInfoSync().screenWidth - 65,
                            top: this.getSystemInfoSync().screenHeight / 2 - 240
                        }
                    });
                    grid.onError((err) => { console.log('屏幕侧格子加载失败:', JSON.stringify(err)); });
                    grid.onLoad(() => { this.sideGridAd.push(grid); });
                }
            }
        }
        static visibleSideGridAd(v = true) {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < this.sideGridAd.length; i++) {
                v ? this.sideGridAd[i].show() : this.sideGridAd[i].hide();
            }
        }
        static createFullSingleGrid() {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < 2; i++) {
                let id = i < this.fullSingleGridIds.length ? i : this.fullSingleGridIds.length - 1;
                let grid = Laya.Browser.window['wx'].createCustomAd({
                    adUnitId: this.fullSingleGridIds[id],
                    adIntervals: 30,
                    style: {
                        left: i == 1 ? this.getSystemInfoSync().screenWidth / 2 - 60 : this.getSystemInfoSync().screenWidth / 2,
                        top: this.getSystemInfoSync().screenHeight - 100
                    }
                });
                grid.onError((err) => { ; console.log('全屏单格子加载失败:', JSON.stringify(err)); });
                grid.onLoad(() => { this.fullSingleGridAd.push(grid); });
            }
        }
        static visibleFullSingleGridAd(v = true) {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < this.fullSingleGridAd.length; i++) {
                v ? this.fullSingleGridAd[i].show() : this.fullSingleGridAd[i].hide();
            }
        }
        static createMidBoxGrid() {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < 2; i++) {
                let grid = Laya.Browser.window['wx'].createCustomAd({
                    adUnitId: this.boxGridIds[i],
                    adIntervals: 30,
                    style: {
                        left: i == 1 ? this.getSystemInfoSync().screenWidth / 2 - 60 : this.getSystemInfoSync().screenWidth / 2,
                        top: this.getSystemInfoSync().screenHeight / 2 - 65
                    }
                });
                grid.onError((err) => { ; console.log('格子宝箱单格子加载失败:', JSON.stringify(err)); });
                grid.onLoad(() => { this.midBoxGridAd.push(grid); });
            }
        }
        static visibleMidBoxGridAd(v = true) {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < this.midBoxGridAd.length; i++) {
                v ? this.midBoxGridAd[i].show() : this.midBoxGridAd[i].hide();
            }
        }
        static createFirstBoxGrid() {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < 2; i++) {
                let grid = Laya.Browser.window['wx'].createCustomAd({
                    adUnitId: this.boxGridIds[i + 2],
                    adIntervals: 30,
                    style: {
                        left: i == 1 ? this.getSystemInfoSync().screenWidth / 2 - 60 : this.getSystemInfoSync().screenWidth / 2,
                        top: this.getSystemInfoSync().screenHeight - 100
                    }
                });
                grid.onError((err) => { ; console.log('第一宝箱单格子加载失败:', JSON.stringify(err)); });
                grid.onLoad(() => { this.firstBoxGridAd.push(grid); });
            }
        }
        static visibleFirstBoxGridAd(v = true) {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < this.firstBoxGridAd.length; i++) {
                v ? this.firstBoxGridAd[i].show() : this.firstBoxGridAd[i].hide();
            }
        }
        static createSecondBoxGrid() {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < 2; i++) {
                let grid = Laya.Browser.window['wx'].createCustomAd({
                    adUnitId: this.boxGridIds[i + 4],
                    adIntervals: 30,
                    style: {
                        left: i == 1 ? this.getSystemInfoSync().screenWidth / 2 - 60 : this.getSystemInfoSync().screenWidth / 2,
                        top: this.getSystemInfoSync().screenHeight - 100
                    }
                });
                grid.onError((err) => { ; console.log('第二宝箱单格子加载失败:', JSON.stringify(err)); });
                grid.onLoad(() => { this.secondBoxGridAd.push(grid); });
            }
        }
        static visibleSecondBoxGridAd(v = true) {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < this.secondBoxGridAd.length; i++) {
                v ? this.secondBoxGridAd[i].show() : this.secondBoxGridAd[i].hide();
            }
        }
        static createGameGrid() {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < 2; i++) {
                let id = i < this.gameGridIds.length ? i : this.gameGridIds.length - 1;
                let grid = Laya.Browser.window['wx'].createCustomAd({
                    adUnitId: this.gameGridIds[id],
                    adIntervals: 30,
                    style: {
                        left: this.getSystemInfoSync().screenWidth - 70,
                        top: this.getSystemInfoSync().screenHeight * 0.05
                    }
                });
                grid.onError((err) => { ; console.log('游戏中单格子加载失败:', JSON.stringify(err)); });
                grid.onLoad(() => { this.gameGridAd.push(grid); });
            }
        }
        static visibleGameGridAd(v = true) {
            if (!Laya.Browser.onWeiXin)
                return;
            if (this.gameGridAd.length > 0) {
                v ? this.gameGridAd[0].show() : this.gameGridAd[0].hide();
            }
        }
        static createFinishGrid() {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < 1; i++) {
                let grid = Laya.Browser.window['wx'].createCustomAd({
                    adUnitId: this.finishGridIds[i],
                    adIntervals: 30,
                    style: {
                        left: 0,
                        top: this.getSystemInfoSync().screenHeight * 0.24,
                        width: this.getSystemInfoSync().screenWidth
                    }
                });
                grid.onError((err) => { ; console.log('结算页多格子加载失败:', JSON.stringify(err)); });
                grid.onLoad(() => { this.finishGridAd.push(grid); });
            }
        }
        static visibleFinishGridAd(v = true) {
            if (!Laya.Browser.onWeiXin)
                return;
            for (let i = 0; i < this.finishGridAd.length; i++) {
                v ? this.finishGridAd[i].show() : this.finishGridAd[i].hide();
            }
        }
        static createInterstitialAd() {
            if (!Laya.Browser.onWeiXin)
                return;
            if (this.intersititialAd) {
                this.intersititialAd.offError();
                this.intersititialAd.offLoad();
                this.intersititialAd.offClose();
                this.intersititialAd.destroy();
                this.intersititialAd = null;
            }
            this.intersititialAd = Laya.Browser.window['wx'].createInterstitialAd({
                adUnitId: this.interstitialIds[0]
            });
            this.intersititialAd.onError((err) => { this.intersititialError = true; console.log('插屏广告加载失败:', JSON.stringify(err)); });
            this.intersititialAd.onLoad(() => { this.intersititialError = false; });
            this.intersititialAd.onClose(() => { this.intersititialCB && this.intersititialCB(); });
            this.intersititialAd.load();
        }
        static showInterstitialAd(cb) {
            if (!Laya.Browser.onWeiXin || !this.intersititialAd || this.intersititialError) {
                if (this.intersititialError)
                    this.createInterstitialAd();
                cb && cb();
                return;
            }
            this.intersititialCB = cb;
            this.intersititialAd.show().then(() => { }).catch(err => {
                this.intersititialCB && this.intersititialCB();
            });
        }
        static shuffleArr(arr) {
            let i = arr.length;
            while (i) {
                let j = Math.floor(Math.random() * i--);
                [arr[j], arr[i]] = [arr[i], arr[j]];
            }
            return arr;
        }
        static initBottomGridAd() {
            let grid = Laya.Browser.window['wx'].createCustomAd({
                adUnitId: SGConfig.data.front_bottom_duogezi_ids,
                adIntervals: 30,
                style: {
                    left: this.getSystemInfoSync().screenWidth * 0.5 - 120,
                    top: this.getSystemInfoSync().screenHeight - 80
                }
            });
            grid.onError((err) => { console.log('底部格子加载失败:', JSON.stringify(err)); });
            grid.onLoad(() => { this.bottomGridAd = grid; });
        }
        static showBottomGridAd() {
            this.bottomGridAd && this.bottomGridAd.show();
        }
        static hideBottomGridAd() {
            this.bottomGridAd && this.bottomGridAd.hide();
        }
    }
    SGAD.bannerIds = [];
    SGAD.videoIds = [];
    SGAD.interstitialIds = [];
    SGAD.fullGridIds = [];
    SGAD.fullSingleGridIds = [];
    SGAD.sideGridIds = [];
    SGAD.boxGridIds = [];
    SGAD.gameGridIds = [];
    SGAD.finishGridIds = [];
    SGAD.bannerAds = [];
    SGAD.bannerIndex = 0;
    SGAD.bannerTimesArr = [];
    SGAD.bannerShowCount = [];
    SGAD.bannerErrorArr = [];
    SGAD.isExistVideoAd = false;
    SGAD.fullGridAd = [];
    SGAD.fullGridError = false;
    SGAD.fullGridShowCount = 0;
    SGAD.fullGridCurIndex = 0;
    SGAD.isFullGridAdLoaded = false;
    SGAD.closeFullGridAdCallback = () => { };
    SGAD.sideGridAd = [];
    SGAD.fullSingleGridAd = [];
    SGAD.midBoxGridAd = [];
    SGAD.firstBoxGridAd = [];
    SGAD.secondBoxGridAd = [];
    SGAD.gameGridAd = [];
    SGAD.finishGridAd = [];
    SGAD.intersititialAd = null;
    SGAD.intersititialCB = null;
    SGAD.intersititialError = false;

    class SGUtils {
        static getRangeNumer(min, max) {
            return (Math.random() * (max - min)) + min;
        }
        static addClickEvent(btn, caller, callBack, param, isScale) {
            btn.offAllCaller(caller);
            if (btn instanceof Laya.Button && !isScale) {
                let callback = (event) => {
                    if (callBack)
                        callBack.call(caller, event);
                };
                btn.on(Laya.Event.CLICK, caller, callback, [param]);
            }
            else {
                let scaleTime = 60;
                let wRatio = 1;
                let scaleX = btn.scaleX * wRatio;
                let scaleY = btn.scaleY * wRatio;
                let size = 0.9 * wRatio;
                let isPressed = false;
                let cbDown = (event) => {
                    isPressed = true;
                    Laya.Tween.to(btn, { scaleX: size, scaleY: size }, scaleTime);
                };
                btn.on(Laya.Event.MOUSE_DOWN, caller, cbDown, [param]);
                let cbUp = (event) => {
                    if (isPressed == false)
                        return;
                    isPressed = false;
                    Laya.Tween.to(btn, { scaleX: scaleX, scaleY: scaleY }, scaleTime, null, new Laya.Handler(caller, () => {
                        if (callBack)
                            callBack.call(caller, event);
                    }));
                };
                btn.on(Laya.Event.MOUSE_UP, caller, cbUp, [param]);
                let cbOut = (event) => {
                    Laya.Tween.to(btn, { scaleX: scaleX, scaleY: scaleY }, scaleTime);
                };
                btn.on(Laya.Event.MOUSE_OUT, caller, cbOut, [param]);
            }
        }
    }

    class SGBoxBottom extends Laya.Scene {
        constructor() {
            super(...arguments);
            this.clickCount = 0;
            this.triggerNum = 0.7;
            this.index = 0;
            this.type = 1;
            this.wuchuCount = 1;
            this.hadShowBanner = false;
            this.onShowCB = null;
        }
        onAwake() {
            this.size(Laya.stage.width, Laya.stage.height);
        }
        onOpened(param) {
            if (param && param.ccb) {
                this.ccb = param.ccb;
            }
            if (param && param.index) {
                this.index = param.index;
            }
            switch (this.index) {
                case 0:
                    this.type = SGConfig.data.front_box_dangezi_number;
                    this.wuchuCount = SGConfig.data.front_box_dangezi_times;
                    break;
                case 1:
                    this.type = SGConfig.data.front_box_second_number;
                    this.wuchuCount = SGConfig.data.front_box_second_times;
                    break;
            }
            this.triggerNum = SGUtils.getRangeNumer(0.2, 0.6);
            SGAD.hideBannerAd();
            this.btnClick.on(Laya.Event.MOUSE_DOWN, this, () => {
                this.onPress();
                this.btnClick.scale(1.1, 1.1);
            });
            this.btnClick.on(Laya.Event.MOUSE_UP, this, () => {
                this.btnClick.scale(1, 1);
            });
            Laya.timer.frameLoop(1, this, this.reFreshUI);
            if (SGConfig.isPortrait) {
                this.pBar.centerY = 300;
            }
            this.onShowCB = () => {
                this.close();
            };
            if (Laya.Browser.onWeiXin) {
                Laya.Browser.window['wx'].onShow(this.onShowCB);
            }
        }
        onClosed() {
            if (Laya.Browser.onWeiXin) {
                Laya.Browser.window['wx'].offShow(this.onShowCB);
            }
            Laya.timer.clearAll(this);
            SGAD.hideBannerAd();
            SGAD.visibleFirstBoxGridAd(false);
            SGAD.visibleSecondBoxGridAd(false);
            Laya.timer.once(100, this, () => {
                this.ccb && this.ccb();
            });
            Laya.timer.once(1000, this, () => {
                SGAD.visibleFirstBoxGridAd(false);
                SGAD.visibleSecondBoxGridAd(false);
            });
        }
        onPress() {
            this.pBar.value += 0.15;
            Laya.Tween.to(this.box, { scaleX: 1.1, scaleY: 1.1 }, 100, null, Laya.Handler.create(this, () => {
                Laya.Tween.to(this.box, { scaleX: 1, scaleY: 1 }, 100);
            }));
            if (this.pBar.value >= this.triggerNum && !this.hadShowBanner) {
                this.hadShowBanner = true;
                this.clickCount++;
                this.triggerNum = SGUtils.getRangeNumer(0.2, 0.6);
                if (this.type == 1) {
                    this.index == 0 ? SGAD.visibleFirstBoxGridAd(true) : SGAD.visibleSecondBoxGridAd(true);
                }
                else if (this.type == 2) {
                    SGAD.showBannerAd(true);
                }
                Laya.timer.once(2000, this, () => {
                    if (this.clickCount >= this.wuchuCount) {
                        this.close();
                    }
                    else {
                        this.hadShowBanner = false;
                        this.pBar.value = 0;
                        if (this.type == 1) {
                            SGAD.visibleFirstBoxGridAd(false);
                            SGAD.visibleSecondBoxGridAd(false);
                        }
                        else if (this.type == 2) {
                            SGAD.hideBannerAd();
                        }
                    }
                });
            }
        }
        reFreshUI() {
            this.pBar.value -= 0.0125;
        }
    }

    class SGScale extends Laya.Script {
        constructor() {
            super();
            this.myScale = null;
        }
        onAwake() {
            this.myOwnwer = this.owner;
            this.myScale = new Laya.Vector2(this.myOwnwer.scaleX, this.myOwnwer.scaleY);
            this.scaleLoop(this.myOwnwer, 0.1, 400);
        }
        scaleLoop(node, rate, t) {
            var tw = Laya.Tween.to(node, { scaleX: this.myScale.x + rate, scaleY: this.myScale.y + rate }, t, null, new Laya.Handler(this, () => {
                Laya.Tween.to(node, { scaleX: this.myScale.x, scaleY: this.myScale.y }, t, null, new Laya.Handler(this, () => {
                    this.scaleLoop(node, rate, t);
                }));
            }));
        }
    }

    class SGRotate extends Laya.Script {
        constructor() {
            super();
            this.myOwnwer = null;
        }
        onAwake() {
            this.myOwnwer = this.owner;
        }
        onUpdate() {
            this.myOwnwer.rotation += 1;
        }
    }

    class SGBoxMiddle extends Laya.Scene {
        constructor() {
            super(...arguments);
            this.clickCount = 0;
            this.triggerNum = 0.7;
            this.curProgress = 0;
            this.hadShowBanner = false;
        }
        onAwake() {
            this.size(Laya.stage.width, Laya.stage.height);
        }
        onOpened(param) {
            if (param && param.ccb) {
                this.ccb = param.ccb;
            }
            this.box.on(Laya.Event.MOUSE_DOWN, this, () => {
                this.boxBtnCB();
                this.box.scale(1.1, 1.1);
            });
            this.box.on(Laya.Event.MOUSE_UP, this, () => {
                this.box.scale(1, 1);
            });
            this.triggerNum = SGUtils.getRangeNumer(0.2, 0.6);
            Laya.timer.frameLoop(1, this, this.reFreshUI);
            SGAD.showBannerAd();
            this.onShowCB = () => {
                this.close();
            };
            if (Laya.Browser.onWeiXin) {
                Laya.Browser.window['wx'].onShow(this.onShowCB);
            }
            this.scaleLoop(this.finger, 1.2, 200);
        }
        onClosed() {
            if (Laya.Browser.onWeiXin) {
                Laya.Browser.window['wx'].offShow(this.onShowCB);
            }
            Laya.timer.clearAll(this);
            SGAD.hideBannerAd();
            SGAD.visibleMidBoxGridAd(false);
            Laya.timer.once(100, this, () => {
                this.ccb && this.ccb();
            });
            Laya.timer.once(1000, this, () => {
                SGAD.visibleMidBoxGridAd(false);
            });
        }
        boxBtnCB() {
            this.curProgress += 0.15;
            if (this.curProgress >= this.triggerNum && !this.hadShowBanner) {
                this.hadShowBanner = true;
                this.clickCount++;
                this.triggerNum = SGUtils.getRangeNumer(0.2, 0.6);
                SGAD.visibleMidBoxGridAd(true);
                Laya.timer.once(2000, this, () => {
                    if (this.clickCount >= SGConfig.data.front_box_before_times) {
                        this.close();
                    }
                    else {
                        SGAD.visibleMidBoxGridAd(false);
                        this.hadShowBanner = false;
                        this.curProgress = 0;
                    }
                });
            }
        }
        reFreshUI() {
            this.curProgress -= 0.0115;
            if (this.curProgress < 0)
                this.curProgress = 0;
        }
        scaleLoop(node, rate, t) {
            var tw = Laya.Tween.to(node, { scaleX: rate, scaleY: rate }, t, null, new Laya.Handler(this, () => {
                Laya.Tween.to(node, { scaleX: 1, scaleY: 1 }, t, null, new Laya.Handler(this, () => {
                    this.scaleLoop(node, rate, t);
                }));
            }));
        }
    }

    class SGFinishUI extends Laya.Scene {
        constructor() {
            super();
        }
        onOpened(param) {
            this.size(Laya.stage.displayWidth, Laya.stage.displayHeight);
            SGUtils.addClickEvent(this.adBtn, this, this.adCB);
            this.adBtn.visible = SGConfig.data.front_video_double_switch == 1;
        }
        onClosed() {
        }
        adCB() {
            SGAD.showVideoAd(() => {
                Laya.Browser.window['wx'].showToast({
                    title: "恭喜获得1000金币！",
                    duration: 2000,
                    mask: false,
                    icon: 'none',
                });
            }, null, () => { });
        }
    }

    class SGMgr {
        static initAd() {
            SGAD.inidAd(() => {
                this.adLoaded = true;
            });
        }
        static init(cb) {
            if (!Laya.Browser.onWeiXin) {
                cb && cb();
                return;
            }
            Laya.loader.load('SGSDK/SGConfig.json', Laya.Handler.create(this, (data) => {
                SGConfig.version = data.version;
                SGConfig.isPortrait = data.isPortrait;
                SGConfig.isShowHomeBanner = data.isShowHomeBanner;
                SGConfig.isShowShopBanner = data.isShowShopBanner;
                SGConfig.initConfigData(() => {
                    this.sdkLoaded = true;
                    this.initAd();
                    if (SGConfig.data.front_leave_return_switch) {
                        Laya.Browser.window.wx.onShow(() => { SGAD.showInterstitialAd(); });
                    }
                });
            }), null, Laya.Loader.JSON);
            let func = () => {
                if (this.adLoaded && this.sdkLoaded) {
                    this.showLoading(cb);
                    Laya.timer.clear(this, func);
                }
            };
            Laya.timer.loop(100, this, func);
        }
        static showLoading(cb) {
            if (!Laya.Browser.onWeiXin) {
                cb && cb();
                return;
            }
            this.showRemen(0, () => {
                this.showBoxMiddle(cb);
            });
        }
        static inHome() {
            if (!Laya.Browser.onWeiXin) {
                return;
            }
            if (SGConfig.isShowHomeBanner)
                SGAD.showBannerAd();
            if (SGConfig.data.front_side_switch)
                SGAD.visibleSideGridAd(true);
            this.visibleHomeUI(true);
        }
        static inShop() {
            if (!Laya.Browser.onWeiXin) {
                return;
            }
            if (!SGConfig.isShowShopBanner)
                SGAD.hideBannerAd();
            SGAD.visibleSideGridAd(false);
            this.visibleHomeUI(false);
        }
        static moreGame() {
            SGAD.hideBannerAd();
            SGAD.visibleSideGridAd(false);
            this.showRemen(1, () => {
                if (SGConfig.isShowHomeBanner)
                    SGAD.showBannerAd();
                if (SGConfig.data.front_side_switch)
                    SGAD.visibleSideGridAd(true);
            }, true);
        }
        static startGame(cb) {
            if (!Laya.Browser.onWeiXin) {
                cb && cb();
                return;
            }
            SGAD.hideBannerAd();
            SGAD.visibleSideGridAd(false);
            this.visibleHomeUI(false);
            this.showRemen(1, () => {
                this.showSkin(() => {
                    this.showBoxBottom(0, cb);
                });
            });
        }
        static inGame() {
            if (!Laya.Browser.onWeiXin) {
                return;
            }
            if (SGConfig.data.front_game_banner_switch)
                SGAD.showBannerAd();
            else
                SGAD.hideBannerAd();
            if (SGConfig.data.front_game_dangezi_switch)
                SGAD.visibleGameGridAd(true);
        }
        static gameOver(cb) {
            if (!Laya.Browser.onWeiXin) {
                cb && cb();
                return;
            }
            SGAD.hideBannerAd();
            SGAD.visibleGameGridAd(false);
            if (SGConfig.data.front_chaping_remen_switch)
                SGAD.showInterstitialAd();
            this.showRemen(2, () => {
                this.showBoxBottom(1, cb);
            });
        }
        static inFinish() {
            if (!Laya.Browser.onWeiXin) {
                return;
            }
            this.visibleFinishUI(true);
            SGAD.showBannerAd();
            if (SGConfig.isPortrait && SGConfig.data.front_jiesuanye_duogezi_switch)
                SGAD.visibleSideGridAd(true);
            if (SGConfig.data.front_jiesuanye_dangezi_switch)
                SGAD.visibleGameGridAd(true);
        }
        static backToHome(cb) {
            if (!Laya.Browser.onWeiXin) {
                cb && cb();
                return;
            }
            this.visibleFinishUI(false);
            SGAD.hideBannerAd();
            SGAD.visibleSideGridAd(false);
            SGAD.visibleGameGridAd(false);
            this.showRemen(3, () => {
                cb && cb();
                if (SGConfig.data.front_chaping_home_switch) {
                    Laya.timer.once(500, this, () => {
                        SGAD.showInterstitialAd();
                    });
                }
                this.gameCount++;
            });
        }
        static showRemen(index, cb, isMust = false) {
            let v = 0;
            switch (index) {
                case RemenIndex.RM_rmxyx:
                    v = SGConfig.data.front_small_remen_switch;
                    break;
                case RemenIndex.RM_rmtj:
                    v = SGConfig.data.front_tuijian_remen_switch;
                    break;
                case RemenIndex.RM_rmyx:
                    v = SGConfig.data.front_game_remen_switch;
                    break;
                case RemenIndex.RM_rmxcx:
                    v = SGConfig.data.front_order_remen_switch;
                    break;
            }
            if (v || isMust) {
                Laya.Scene.open(SceneType.SGRemen, false, { ccb: cb, index: index }, Laya.Handler.create(this, s => {
                    Laya.stage.addChild(s);
                }));
            }
            else {
                cb && cb();
            }
        }
        static showBoxMiddle(cb) {
            if (SGConfig.data.front_box_before_switch) {
                Laya.Scene.open(SceneType.SGBoxMiddle, false, { ccb: cb }, Laya.Handler.create(this, s => {
                    Laya.stage.addChild(s);
                }));
            }
            else {
                cb && cb();
            }
        }
        static showBoxBottom(index, cb) {
            let v = null;
            let v1 = null;
            switch (index) {
                case 0:
                    v = SGConfig.data.front_box_dangezi_switch;
                    if (SGConfig.data.front_box_level_interval <= 0)
                        v1 = this.gameCount >= SGConfig.data.front_box_level;
                    else
                        v1 = this.gameCount >= SGConfig.data.front_box_level &&
                            Math.floor((this.gameCount - SGConfig.data.front_box_level) % (SGConfig.data.front_box_level_interval + 1)) == 0;
                    v = v && v1;
                    break;
                case 1:
                    v = SGConfig.data.front_box_second_switch;
                    if (SGConfig.data.front_box_second_level_interval <= 0)
                        v1 = this.gameCount >= SGConfig.data.front_box_second_level;
                    else
                        v1 = this.gameCount >= SGConfig.data.front_box_second_level &&
                            Math.floor((this.gameCount - SGConfig.data.front_box_second_level) % (SGConfig.data.front_box_second_level_interval + 1)) == 0;
                    v = v && v1;
                    break;
            }
            if (v) {
                Laya.Scene.open(SceneType.SGBoxBottom, false, { index: index, ccb: cb }, Laya.Handler.create(this, s => {
                    Laya.stage.addChild(s);
                }));
            }
            else {
                cb && cb();
            }
        }
        static showSkin(cb) {
            cb && cb();
        }
        static visibleHomeUI(v = true) {
            if (v)
                Laya.Scene.open(SceneType.SGHomeUI, false, null, Laya.Handler.create(this, s => {
                    Laya.stage.addChild(s);
                }));
            else
                Laya.Scene.close(SceneType.SGHomeUI);
        }
        static visibleFinishUI(v = true) {
            if (v)
                Laya.Scene.open(SceneType.SGFinish, false, null, Laya.Handler.create(this, s => {
                    Laya.stage.addChild(s);
                }));
            else
                Laya.Scene.close(SceneType.SGFinish);
        }
    }
    SGMgr.gameCount = 1;
    SGMgr.adLoaded = false;
    SGMgr.sdkLoaded = false;
    var SceneType;
    (function (SceneType) {
        SceneType["SGRemen"] = "SGScene/SGRemen.scene";
        SceneType["SGBoxBottom"] = "SGScene/SGBoxBottom.scene";
        SceneType["SGBoxMiddle"] = "SGScene/SGBoxMiddle.scene";
        SceneType["SGHomeUI"] = "SGScene/SGHomeUI.scene";
        SceneType["SGSkin"] = "SGScene/SGSkin.scene";
        SceneType["SGFinish"] = "SGScene/SGFinishUI.scene";
    })(SceneType || (SceneType = {}));
    var RemenIndex;
    (function (RemenIndex) {
        RemenIndex[RemenIndex["RM_rmxyx"] = 0] = "RM_rmxyx";
        RemenIndex[RemenIndex["RM_rmtj"] = 1] = "RM_rmtj";
        RemenIndex[RemenIndex["RM_rmyx"] = 2] = "RM_rmyx";
        RemenIndex[RemenIndex["RM_rmxcx"] = 3] = "RM_rmxcx";
    })(RemenIndex || (RemenIndex = {}));

    class SGHomeUI extends Laya.Scene {
        constructor() {
            super();
        }
        onOpened(param) {
            this.size(Laya.stage.displayWidth, Laya.stage.displayHeight);
            SGUtils.addClickEvent(this.remenBtn, this, this.remenCB);
            this.remenBtn.visible = SGConfig.data.front_more_haowan_switch == 1;
        }
        remenCB() {
            SGMgr.moreGame();
        }
    }

    class SGRemen extends Laya.Scene {
        constructor() {
            super();
            this.ccb = null;
            this.onShowCB = null;
            this.clickCount = 0;
            this.index = RemenIndex.RM_rmxyx;
            this.type = 1;
            this.isWuchu = 0;
            this.gridFuncName = '';
        }
        onAwake() {
            this.size(Laya.stage.displayWidth, Laya.stage.displayHeight);
        }
        onOpened(param) {
            if (param && param.ccb)
                this.ccb = param.ccb;
            if (param && param.index != undefined)
                this.index = param.index;
            this.title.getChildAt(this.index).visible = true;
            SGUtils.addClickEvent(this.btnContinue, this, this.btnContinueCB);
            SGAD.visibleFullGridAd(true);
            switch (this.index) {
                case 0:
                    this.type = SGConfig.data.front_small_remen_number;
                    this.isWuchu = SGConfig.data.front_small_wuchu_switch;
                    break;
                case 1:
                    this.type = SGConfig.data.front_tuijian_remen_number;
                    this.isWuchu = SGConfig.data.front_tuijian_wuchu_switch;
                    break;
                case 2:
                    this.type = SGConfig.data.front_game_remen_number;
                    this.isWuchu = SGConfig.data.front_game_wuchu_switch;
                    break;
                case 3:
                    this.type = SGConfig.data.front_order_remen_number;
                    this.isWuchu = SGConfig.data.front_order_wuchu_switch;
                    break;
            }
            if (this.isWuchu) {
                this.showHide();
            }
            this.onShowCB = () => {
                this.close();
            };
            if (Laya.Browser.onWeiXin) {
                Laya.Browser.window['wx'].onShow(this.onShowCB);
            }
        }
        onClosed() {
            if (Laya.Browser.onWeiXin) {
                Laya.Browser.window['wx'].offShow(this.onShowCB);
            }
            Laya.timer.clearAll(this);
            SGAD.hideBannerAd();
            SGAD.visibleFullSingleGridAd(false);
            SGAD.visibleFullGridAd(false);
            Laya.timer.once(100, this, () => {
                this.ccb && this.ccb();
            });
            Laya.timer.once(1000, this, () => {
                SGAD.visibleFullSingleGridAd(false);
                SGAD.visibleFullGridAd(false);
            });
        }
        showHide() {
            if (this.type == 2) {
                SGAD.hideBannerAd();
                Laya.timer.once(SGConfig.data.front_gezi_time, this, () => {
                    SGAD.showBannerAd(true);
                    Laya.timer.once(800, this, () => {
                        this.showHide();
                    });
                });
            }
            else if (this.type == 1) {
                SGAD.visibleFullSingleGridAd(false);
                Laya.timer.once(SGConfig.data.front_gezi_time, this, () => {
                    SGAD.visibleFullSingleGridAd(true);
                    Laya.timer.once(800, this, () => {
                        this.showHide();
                    });
                });
            }
        }
        btnContinueCB() {
            this.clickCount++;
            if (this.clickCount >= SGConfig.data.front_gezi_number) {
                this.btnContinue.visible = false;
                Laya.timer.clearAll(this);
                SGAD.hideBannerAd();
                SGAD.visibleFullSingleGridAd(false);
                Laya.timer.once(SGConfig.data.front_hide_remenbtn_time, this, () => {
                    this.close();
                });
            }
        }
    }

    class SGSkin extends Laya.Scene {
        constructor() {
            super();
        }
        onOpened(param) {
            if (param && param.ccb) {
                this.ccb = param.ccb;
            }
            this.size(Laya.stage.displayWidth, Laya.stage.displayHeight);
            SGUtils.addClickEvent(this.btnGet, this, this.btnGetCB);
            SGUtils.addClickEvent(this.btnCancel, this, this.btnCancelCB);
            this.icon.skin = '';
            if (SGConfig.isPortrait) {
                SGAD.showBannerAd();
            }
            else {
                SGAD.hideBannerAd();
            }
        }
        onClosed() {
            Laya.timer.once(100, this, () => {
                this.ccb && this.ccb();
            });
        }
        btnGetCB() {
            this.showAd();
        }
        btnCancelCB() {
            Laya.Scene.close(SceneType.SGSkin);
        }
        showAd() {
            Laya.Scene.close(SceneType.SGSkin);
        }
        showWxVirtual() {
            Laya.Scene.close(SceneType.SGSkin);
        }
    }

    class Tween2D {
        static toAlpha(tweenTarget, firstValue, lastValue, duration, ease, completeCB, isLoop, isReset) {
            if (!tweenTarget || tweenTarget.destroyed)
                return;
            let handler = null;
            tweenTarget.alpha = firstValue;
            alphaToLast();
            function alphaToLast() {
                handler = isLoop || isReset ? new Laya.Handler(this, alphaToFirst) : new Laya.Handler(this, () => { completeCB && completeCB(); completeCB = null; });
                Laya.Tween.to(tweenTarget, { alpha: lastValue }, duration, ease, handler);
            }
            function alphaToFirst() {
                handler = isLoop ? new Laya.Handler(this, alphaToLast) : null;
                Laya.Tween.to(tweenTarget, { alpha: firstValue }, duration, ease, handler);
            }
        }
        static toScale(tweenTarget, firstValue, lastValue, duration, ease, completeCB, isReset, isLoop = false) {
            if (!tweenTarget || tweenTarget.destroyed)
                return;
            let handler = null;
            tweenTarget.scale(firstValue, firstValue);
            scale1();
            function scale1() {
                handler = isLoop || isReset ? new Laya.Handler(this, scale2) : new Laya.Handler(this, () => { completeCB && completeCB(); completeCB = null; });
                Laya.Tween.to(tweenTarget, { scaleX: lastValue, scaleY: lastValue }, duration, ease, handler);
            }
            function scale2() {
                handler = isLoop ? new Laya.Handler(this, scale1) : null;
                Laya.Tween.to(tweenTarget, { scaleX: firstValue, scaleY: firstValue }, duration, ease, handler);
            }
        }
        static toRotation(tweenTarget, angle, duration, isLoop = false, isReset = false) {
            if (!tweenTarget)
                return;
            var curAngle = tweenTarget.rotation;
            rotate1();
            function rotate1() {
                if (isLoop) {
                    var handler = new Laya.Handler(this, rotate2);
                }
                else if (isReset) {
                    var handler = new Laya.Handler(this, rotate4);
                }
                Laya.Tween.to(tweenTarget, { rotation: angle }, duration, null, handler);
            }
            function rotate2() {
                Laya.Tween.to(tweenTarget, { rotation: -angle }, duration * 2, null, Laya.Handler.create(this, rotate3));
            }
            function rotate3() {
                Laya.Tween.to(tweenTarget, { rotation: angle }, duration * 2, null, Laya.Handler.create(this, rotate2));
            }
            function rotate4() {
                Laya.Tween.to(tweenTarget, { rotation: curAngle }, duration);
            }
        }
        static toPosition(tweenTarget, position, duration, ease = null, completeCB = null, isLoop = false, type = 0) {
            if (!tweenTarget)
                return;
            let curPos = new Laya.Vector2(tweenTarget.x, tweenTarget.y);
            pos1();
            function pos1() {
                if (isLoop) {
                    switch (type) {
                        case 0:
                            var handler = new Laya.Handler(this, pos2);
                            break;
                        case 1:
                            handler = new Laya.Handler(this, pos3);
                            break;
                    }
                }
                else {
                    handler = new Laya.Handler(this, () => { completeCB && completeCB(); completeCB = null; });
                }
                Laya.Tween.to(tweenTarget, { x: position.x, y: position.y }, duration, ease, handler);
            }
            function pos2() {
                Laya.Tween.to(tweenTarget, { x: curPos.x, y: curPos.y }, duration, ease, Laya.Handler.create(this, pos1));
            }
            function pos3() {
                tweenTarget.pos(curPos.x, curPos.y);
                pos1();
            }
        }
        static toSwitch(tweenTarget, changeSkin, count, delayTime) {
            if (count < 0)
                return;
            let oldSkin = tweenTarget.skin;
            tweenTarget.skin = changeSkin;
            Laya.timer.once(delayTime, tweenTarget, () => {
                this.toSwitch(tweenTarget, oldSkin, count - 1, delayTime);
            });
        }
        static clear(tweenTarget) {
            Laya.Tween.clearAll(tweenTarget);
            Laya.timer.clearAll(tweenTarget);
        }
    }

    class BaseUI extends Laya.Scene {
        constructor() {
            super(...arguments);
            this.buttonList = [];
            this.dontSoundBtnList = [];
            this.allList = [];
        }
        onAwake() {
            this.size(Laya.stage.width, Laya.stage.height);
            this.initUI();
        }
        onOpened(param) {
            Laya.timer.once(20, this, this.openUIDelay, [param]);
        }
        onClosed(type) {
            GlobalCtrl.Event.offAllCaller(this);
            Laya.timer.clearAll(this);
            this.clearButton();
            this.closeUI();
        }
        closeScene() {
            if (this["windowBg"]) {
                Tween2D.toScale(this["windowBg"], 1, 0, 200, Laya.Ease.backIn, () => {
                    GlobalCtrl.UI.closeScene(this.url);
                });
            }
            else {
                GlobalCtrl.UI.closeScene(this.url);
            }
        }
        initUI() {
            for (let key in this) {
                if (key.indexOf("btn") != -1) {
                    this.useButton(this[key], () => {
                        this.clickButton(key);
                    }, null, true, this.isSoundBtn(key));
                }
                else if (key.indexOf("FullBox") != -1) {
                    this[key].size(Laya.stage.width, Laya.stage.height);
                }
            }
            if (this["windowBg"]) {
                Tween2D.toScale(this["windowBg"], 0, 1, 200, Laya.Ease.backOut);
            }
            if (this["lbCoin"]) {
                this["lbCoin"].text = GlobalCtrl.StorageData.coin;
                GlobalCtrl.Event.on(EventType.Update_Coin_Event, this, () => {
                    this["lbCoin"].text = GlobalCtrl.StorageData.coin;
                });
            }
            else if (this["fcCoin"]) {
                this["fcCoin"].value = GlobalCtrl.StorageData.coin;
                GlobalCtrl.Event.on(EventType.Update_Coin_Event, this, () => {
                    this["fcCoin"].value = GlobalCtrl.StorageData.coin;
                });
            }
            if (this["fcLevel"]) {
                this["fcLevel"].value = GlobalCtrl.StorageData.level;
            }
            if (this["btnClose"]) {
                this.useButton(this["btnClose"], this.closeScene);
            }
        }
        openUIDelay(param) { }
        closeUI() { }
        clearUiMask(spr) {
            if (spr.mask) {
                spr.mask.graphics.clear();
                spr.destroy();
            }
        }
        isSoundBtn(key) {
            return this.dontSoundBtnList.indexOf(key) == -1;
        }
        useButton(btn, func, args, isTween = true, isSound = true) {
            btn.offAllCaller(this);
            if (isTween) {
                let tweenTime = 60;
                let oldScale = btn.scaleX;
                let newScale = oldScale * 1.1;
                let btnDown = (evt) => { Laya.Tween.to(btn, { scaleX: newScale, scaleY: newScale }, tweenTime); };
                let btnUp = (evt) => {
                    Laya.Tween.to(btn, { scaleX: oldScale, scaleY: oldScale }, tweenTime);
                    if (isSound) {
                        GlobalCtrl.Audio.playSound(AudioType.Click);
                    }
                };
                let btnOut = (evt) => { Laya.Tween.to(btn, { scaleX: oldScale, scaleY: oldScale }, tweenTime); };
                btn.on(Laya.Event.MOUSE_DOWN, this, btnDown);
                btn.on(Laya.Event.MOUSE_UP, this, btnUp);
                btn.on(Laya.Event.MOUSE_OUT, this, btnOut);
            }
            btn.on(Laya.Event.CLICK, this, func, args);
            this.buttonList.push(btn);
        }
        useButtonKeepDown(btn, type, dnCb, upCb, pressSkin) {
            let btnTmp = btn;
            let upSkin = btnTmp.skin;
            let downSkin = pressSkin ? pressSkin : upSkin;
            let oldScale = btn.scaleX;
            let newScale = oldScale * 1.1;
            let isPressed = false;
            btnTmp.offAllCaller(this);
            btnTmp.on(Laya.Event.MOUSE_DOWN, this, () => {
                btnTmp.skin = downSkin;
                Laya.Tween.to(btn, { scaleX: newScale, scaleY: newScale }, 100);
                dnCb && dnCb();
                isPressed = true;
                GlobalCtrl.Event.event(EventType.Button_DownUp_Event, { type: type, isPressed: true });
            });
            btnTmp.on(Laya.Event.MOUSE_UP, this, () => {
                btnTmp.skin = upSkin;
                Laya.Tween.to(btn, { scaleX: oldScale, scaleY: oldScale }, 100);
                upCb && upCb();
                isPressed = false;
                GlobalCtrl.Event.event(EventType.Button_DownUp_Event, { type: type, isPressed: false });
            });
            btnTmp.on(Laya.Event.MOUSE_OUT, this, () => {
                if (isPressed) {
                    btnTmp.skin = upSkin;
                    Laya.Tween.to(btn, { scaleX: oldScale, scaleY: oldScale }, 100);
                    GlobalCtrl.Event.event(EventType.Button_DownUp_Event, { type: type, isPressed: false });
                    upCb && upCb();
                    isPressed = false;
                }
            });
        }
        clickButton(key) {
            console.log("按钮按下：", key);
        }
        clearButton() {
            for (let i = 0; i < this.buttonList.length; i++) {
                this.buttonList[i].offAllCaller(this);
            }
        }
        hasList(list, remove = false) {
            let index = this.allList.indexOf(list);
            if (index == -1) {
                this.allList.push(list);
                return false;
            }
            else {
                if (remove) {
                    this.allList.splice(index, 1);
                }
                return true;
            }
        }
        useList(list, renderRefresh, listItemClick, scrollType = 0, elasticEnabled = true) {
            if (this.hasList(list))
                return;
            list.renderHandler = Laya.Handler.create(this, (cell, index) => {
                renderRefresh && renderRefresh(cell, index);
                cell && cell.scale && cell.scale(1, 1);
                if (listItemClick) {
                    this.useButton(cell, listItemClick, [index]);
                }
            }, null, false);
            list.elasticEnabled = elasticEnabled;
            switch (scrollType) {
                case 1:
                    list.vScrollBarSkin = '';
                    break;
                case 2:
                    list.hScrollBarSkin = '';
                    break;
                default:
                    list.elasticEnabled = false;
                    break;
            }
        }
        removeList(list) {
            this.hasList(list, true);
        }
        updateListData(list, data) {
            list.array = data;
        }
    }

    class DifficultySurgeUI extends BaseUI {
        openUIDelay(param) {
            if (GlobalCtrl.CommonData.canShowBanner) {
                this.titleImg.top = 450;
            }
        }
    }

    class Tween3D {
        constructor() {
            this.tween = new Laya.Tween();
            this.tweens = [];
        }
        getTimeByFrame(frame) {
            return Math.round(1000 / 100 * frame);
        }
        toTween(target, value, time, completeFun, ease, isLocal = true) {
            if (target.destroyed)
                return;
            this.target = target;
            this.isLocal = isLocal;
            var ov = {};
            var tv = {};
            if (value.pos) {
                var targetPos = isLocal ? target.transform.localPosition.clone() : target.transform.position.clone();
                ov.posX = targetPos.x;
                ov.posY = targetPos.y;
                ov.posZ = targetPos.z;
                tv.posX = value.pos.x;
                tv.posY = value.pos.y;
                tv.posZ = value.pos.z;
            }
            if (value.rot) {
                var targetRot = isLocal ? target.transform.localRotationEuler.clone() : target.transform.rotationEuler.clone();
                ov.rotX = targetRot.x;
                ov.rotY = targetRot.y;
                ov.rotZ = targetRot.z;
                tv.rotX = value.rot.x;
                tv.rotY = value.rot.y;
                tv.rotZ = value.rot.z;
            }
            if (value.sca) {
                var targetSca = isLocal ? target.transform.localScale.clone() : target.transform.getWorldLossyScale().clone();
                ov.scaX = targetSca.x;
                ov.scaY = targetSca.y;
                ov.scaZ = targetSca.z;
                tv.scaX = value.sca.x;
                tv.scaY = value.sca.y;
                tv.scaZ = value.sca.z;
            }
            if (value.rotQua) {
                var targetQua = isLocal ? target.transform.localRotation.clone() : target.transform.rotation.clone();
                ov.rotX = targetQua.x;
                ov.rotY = targetQua.y;
                ov.rotZ = targetQua.z;
                ov.rotW = targetQua.w;
                tv.rotX = value.rotQua.x;
                tv.rotY = value.rotQua.y;
                tv.rotZ = value.rotQua.z;
                tv.rotW = value.rotQua.w;
            }
            this.tween.to(ov, {
                posX: tv.posX, posY: tv.posY, posZ: tv.posZ,
                rotX: tv.rotX, rotY: tv.rotY, rotZ: tv.rotZ, rotW: tv.rotW,
                scaX: tv.scaX, scaY: tv.scaY, scaZ: tv.scaZ,
            }, time, ease, Laya.Handler.create(this, () => {
                completeFun && completeFun();
                var nextTWeen = this.tweens.shift();
                if (nextTWeen) {
                    this.toTween(this.target, nextTWeen.value, nextTWeen.time, nextTWeen.completeFun, ease);
                }
                else {
                    if (this.updateTweenCallback) {
                        this.updateTweenCallback = null;
                    }
                }
            }));
            var progressTimer = 0;
            this.tween.update = new Laya.Handler(this, () => {
                if (target.destroyed) {
                    this.clearTween();
                    return;
                }
                progressTimer += Laya.timer.delta;
                let progress = progressTimer / time;
                if (progress > 1)
                    progress = 1;
                if (value.pos) {
                    if (isLocal) {
                        target.transform.localPosition = new Laya.Vector3(ov.posX, ov.posY, ov.posZ);
                    }
                    else {
                        target.transform.position = new Laya.Vector3(ov.posX, ov.posY, ov.posZ);
                    }
                }
                if (value.rot) {
                    if (isLocal) {
                        target.transform.localRotationEuler = new Laya.Vector3(ov.rotX, ov.rotY, ov.rotZ);
                    }
                    else {
                        target.transform.rotationEuler = new Laya.Vector3(ov.rotX, ov.rotY, ov.rotZ);
                    }
                }
                if (value.sca) {
                    if (isLocal) {
                        target.transform.localScale = new Laya.Vector3(ov.scaX, ov.scaY, ov.scaZ);
                    }
                    else {
                        target.transform.setWorldLossyScale(new Laya.Vector3(ov.scaX, ov.scaY, ov.scaZ));
                    }
                }
                if (value.rotQua) {
                    if (isLocal) {
                        target.transform.localRotation = new Laya.Quaternion(ov.rotX, ov.rotY, ov.rotZ, ov.rotW);
                    }
                    else {
                        target.transform.rotation = new Laya.Quaternion(ov.rotX, ov.rotY, ov.rotZ, ov.rotW);
                    }
                }
                this.updateTweenCallback && this.updateTweenCallback(progress);
            });
            return this;
        }
        clearTween(value) {
            this.tweens = [];
            this.tween.clear();
            if (this.target && value) {
                if (value.pos) {
                    if (this.isLocal) {
                        this.target.transform.localPosition = new Laya.Vector3(value.pos.x, value.pos.y, value.pos.z);
                    }
                    else {
                        this.target.transform.position = new Laya.Vector3(value.pos.x, value.pos.y, value.pos.z);
                    }
                }
                if (value.rot) {
                    this.target.transform.rotationEuler = new Laya.Vector3(value.rot.x, value.rot.y, value.rot.z);
                }
                if (value.sca) {
                    if (this.isLocal) {
                        this.target.transform.localScale = new Laya.Vector3(value.sca.x, value.sca.y, value.sca.z);
                    }
                    else {
                        this.target.transform.setWorldLossyScale(new Laya.Vector3(value.sca.x, value.sca.y, value.sca.z));
                    }
                }
            }
        }
        then(value, time, completeFun) {
            this.tweens.push({ value: value, time: time, completeFun: completeFun });
            return this;
        }
    }

    class UtilsFunctions {
        static getMeshBoundSize(meshSprite) {
            let pos = [];
            let mesh = meshSprite.meshFilter.sharedMesh;
            mesh.getPositions(pos);
            let maxX = 0, minX = 0;
            let maxY = 0, minY = 0;
            let maxZ = 0, minZ = 0;
            for (var i = 0; i < pos.length; i++) {
                maxX = Math.max(maxX, pos[i].x);
                maxY = Math.max(maxY, pos[i].y);
                maxZ = Math.max(maxZ, pos[i].z);
                minX = Math.min(minX, pos[i].x);
                minY = Math.min(minY, pos[i].y);
                minZ = Math.min(minZ, pos[i].z);
            }
            let sca = meshSprite.transform.getWorldLossyScale();
            return new Laya.Vector3((maxX - minX) * sca.x, (maxY - minY) * sca.y, (maxZ - minZ) * sca.z);
        }
        static getV3WithAxis(myPos, targetPos, axis, angle) {
            let desPos = new Laya.Vector3();
            let dis = Laya.Vector3.distance(myPos, targetPos);
            let dir = new Laya.Vector3();
            Laya.Vector3.subtract(myPos, targetPos, dir);
            Laya.Vector3.normalize(dir, dir);
            let q = new Laya.Quaternion();
            Laya.Vector3.normalize(axis, axis);
            Laya.Quaternion.createFromAxisAngle(axis, angle * Math.PI / 180, q);
            Laya.Vector3.transformQuat(dir, q, dir);
            Laya.Vector3.scale(dir, dis, dir);
            Laya.Vector3.add(targetPos, dir, desPos);
            return desPos;
        }
        static getForeachChildByName(rootNode, name) {
            let targetNode = null;
            let funC = (node) => {
                for (let i = 0; i < node.numChildren; i++) {
                    if (node.getChildAt(i).name == name) {
                        targetNode = node.getChildAt(i);
                        return;
                    }
                    else {
                        funC(node.getChildAt(i));
                    }
                }
            };
            funC(rootNode);
            return targetNode;
        }
        static shake3dTarget(target, shakeTime = 1, shakeAmount = 0.7, finishCallback) {
            var shake = shakeTime;
            var decreaseFactor = 1;
            var originalPos = target.transform.localPosition.clone();
            Laya.timer.frameLoop(1, this, updateShake);
            function randomPos() {
                var x = Math.random() > 0.5 ? Math.random() : -(Math.random());
                var y = Math.random() > 0.5 ? Math.random() : -(Math.random());
                return new Laya.Vector3(x, y, 0);
            }
            function updateShake() {
                if (shake > 0) {
                    if (target.destroyed) {
                        Laya.timer.clear(this, updateShake);
                        return;
                    }
                    var pos = new Laya.Vector3();
                    Laya.Vector3.scale(randomPos(), shakeAmount, pos);
                    Laya.Vector3.add(originalPos, pos, pos);
                    target.transform.localPosition = pos;
                    shake -= 0.02 * decreaseFactor;
                }
                else {
                    shake = 0;
                    target.transform.localPosition = originalPos;
                    Laya.timer.clear(this, updateShake);
                    finishCallback && finishCallback();
                }
            }
        }
        static getVec2ByVec3(camera, targetPos) {
            let dir = this.vec3Forward(camera);
            let v1 = this.vec3Sub(targetPos, camera.transform.position);
            let angle = this.getEulerAngleByVec3(dir, v1);
            let outPos = new Laya.Vector4;
            camera.viewport.project(targetPos, camera.projectionViewMatrix, outPos);
            let pos2d = new Laya.Vector2(outPos.x / Laya.stage.clientScaleX, outPos.y / Laya.stage.clientScaleY);
            return pos2d;
        }
        static fixCameraField(camera) {
            let staticDT = 1624 - 1334;
            let curDT = Laya.stage.displayHeight - 1334 < 0 ? 0 : Laya.stage.displayHeight - 1334;
            let per = curDT / staticDT * 10;
            camera.fieldOfView += per;
        }
        static getEulerAngleByVec3(v1, v2) {
            var a = Laya.Vector3.dot(v1, v2);
            var b = Laya.Vector3.scalarLength(v1) * Laya.Vector3.scalarLength(v2);
            if (b == 0) {
                if (v1.z > v2.z)
                    return 0;
                else if (v1.z < v2.z)
                    return 180;
                if (v1.y > v2.y)
                    return 90;
                else if (v1.y < v2.y)
                    return -90;
            }
            var cosAngle = a / b;
            var angle = Math.acos(cosAngle) * 180 / Math.PI;
            return angle;
        }
        static clone3dTarget(target) {
            if (!target || !target.clone)
                return null;
            return target.clone();
        }
        static rotateTarget(target, angleEuler, time, frameCb) {
            if (angleEuler < 0) {
                angleEuler = 180 + (180 + angleEuler);
            }
            let curAngleEuler = target.transform.rotationEuler.y;
            if (curAngleEuler < 0) {
                curAngleEuler = 180 + (180 + curAngleEuler);
            }
            if (Math.abs(curAngleEuler - angleEuler) > 180) {
                if (curAngleEuler > 180) {
                    curAngleEuler -= 360;
                    var isAdd = true;
                }
                else {
                    curAngleEuler += 360;
                    isAdd = false;
                }
            }
            else if (curAngleEuler > angleEuler) {
                isAdd = false;
            }
            else {
                isAdd = true;
            }
            let rotateTimer = 0;
            let startRotate = (isAdd, curAngle, targetAngle) => {
                if (target.destroyed) {
                    Laya.timer.clear(this, startRotate);
                    return;
                }
                rotateTimer += Laya.timer.delta;
                let progress = rotateTimer / time;
                if (progress > 1) {
                    progress = 1;
                    Laya.timer.clear(this, startRotate);
                }
                let value = Math.abs(curAngle - targetAngle) * progress;
                let angle = isAdd ? curAngle + value : curAngle - value;
                let rot = target.transform.rotationEuler.clone();
                rot.y = angle;
                target.transform.rotationEuler = rot;
                frameCb && frameCb(progress);
            };
            Laya.timer.frameLoop(1, this, startRotate, [isAdd, curAngleEuler, angleEuler]);
        }
        static secondToTime(s, t = ":") {
            let minutes = Math.round((s - 30) / 60);
            let seconds = s % 60;
            var secStr = seconds > 10 ? seconds.toFixed(0) : "0" + seconds.toFixed(0);
            if (secStr == "010") {
                secStr = "10";
            }
            else if (secStr == "60") {
                secStr = "00";
                minutes += 1;
            }
            var minStr = minutes > 9 ? minutes + t : "0" + minutes + t;
            return (minutes > 0 ? minStr : "00" + t) + (seconds > 0 ? (secStr + "") : "00");
        }
        static transformValue(value) {
            let newValue = ['', '', ''];
            let fr = 1000;
            let num = 3;
            var fm = 1;
            while (value / fr >= 1) {
                fr *= 10;
                num += 1;
            }
            if (num <= 4) {
                newValue[1] = 'k';
                newValue[0] = (value / 1000).toFixed(1);
            }
            else if (num <= 9) {
                let text1 = parseInt((num - 4).toFixed(0)) / 2 > 1 ? 'm' : 'k';
                fm = 'k' === text1 ? 1000 : 1000000;
                newValue[1] = text1;
                let valueTmp = (value / fm).toFixed(1);
                newValue[0] = valueTmp + '';
            }
            else if (num <= 16) {
                let text1 = 'b';
                let fm = 1;
                if ('m' === text1) {
                    fm = 1000000;
                }
                else if ('b' === text1) {
                    fm = 1000000000;
                }
                newValue[1] = text1;
                newValue[0] = (value / fm).toFixed(1);
            }
            if (value < 1000) {
                newValue[1] = '';
                newValue[0] = Number(value).toFixed(1) + '';
            }
            return newValue.join('');
        }
        static clamp(value, min, max) {
            value = this.clampMax(value, max);
            value = this.clampMin(value, min);
            return value;
        }
        static clampMax(value, max) {
            if (value > max) {
                value = max;
            }
            return value;
        }
        static clampMin(value, min) {
            if (value < min) {
                value = min;
            }
            return value;
        }
        static progressValue(oldValue, newValue, progress) {
            let value = (newValue - oldValue) * progress + oldValue;
            return value;
        }
        static isDistancePow(x1, y1, x2, y2, distance) {
            return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < distance;
        }
        static getRandomArray(array, amount) {
            var arrayTmp = [];
            var newArray = [];
            newArray = newArray.concat(array);
            newArray = newArray.sort(function () { return 0.5 - Math.random(); });
            for (var i = 0; i < amount; i++) {
                arrayTmp.push(newArray[i]);
            }
            return arrayTmp;
        }
        static getRandomIten(array) {
            return this.getRandomArray(array, 1)[0];
        }
        static rotateValue(curAngleEuler, targetAngleEuler, time, frameCb) {
            if (curAngleEuler < 0) {
                curAngleEuler = 180 + (180 - curAngleEuler);
            }
            if (targetAngleEuler < 0) {
                targetAngleEuler = 180 + (180 - targetAngleEuler);
            }
            if (Math.abs(curAngleEuler - targetAngleEuler) > 180) {
                if (curAngleEuler > 180) {
                    curAngleEuler -= 360;
                    var isAdd = true;
                }
                else {
                    curAngleEuler += 360;
                    isAdd = false;
                }
            }
            else if (curAngleEuler > targetAngleEuler) {
                isAdd = false;
            }
            else {
                isAdd = true;
            }
            let rotateTimer = 0;
            let startRotate = (isAdd, curAngle, targetAngle) => {
                rotateTimer += Laya.timer.delta;
                let progress = rotateTimer / time;
                if (progress > 1) {
                    progress = 1;
                    Laya.timer.clear(this, startRotate);
                }
                let value = Math.abs(curAngle - targetAngle) * progress;
                let angle = isAdd ? curAngle + value : curAngle - value;
                frameCb && frameCb(progress, angle);
            };
            Laya.timer.frameLoop(1, this, startRotate, [isAdd, curAngleEuler, targetAngleEuler]);
        }
        static foreachFunc(array, func) {
            for (let i = array.length - 1; i >= 0; i--) {
                let isBreak = func(array[i], i);
                if (isBreak)
                    break;
            }
        }
        static getCurrentTime() {
            return Math.floor(Date.parse((new Date()).toString()) / 1000);
        }
        static vec3Add(v1, v2) {
            let v = new Laya.Vector3;
            Laya.Vector3.add(v1, v2, v);
            return v;
        }
        static vec3Sub(v1, v2) {
            let v = new Laya.Vector3;
            Laya.Vector3.subtract(v1, v2, v);
            return v;
        }
        static vec3Scale(v1, scale) {
            let v = new Laya.Vector3;
            Laya.Vector3.scale(v1, scale, v);
            return v;
        }
        static vec3Forward(spr3d) {
            let dir = new Laya.Vector3;
            spr3d.transform.getForward(dir);
            Laya.Vector3.normalize(dir, dir);
            return dir;
        }
        static vec3Right(spr3d) {
            let dir = new Laya.Vector3;
            spr3d.transform.getRight(dir);
            Laya.Vector3.normalize(dir, dir);
            return dir;
        }
        static vec3Up(spr3d) {
            let dir = new Laya.Vector3;
            spr3d.transform.getUp(dir);
            Laya.Vector3.normalize(dir, dir);
            return dir;
        }
        static vec3Dir(v1, v2) {
            let dir = this.vec3Sub(v1, v2);
            Laya.Vector3.normalize(dir, dir);
            return dir;
        }
        static vec3Distance(v1, v2) {
            return Laya.Vector3.distance(v1, v2);
        }
        static vec3DistancePow(v1, v2) {
            return Laya.Vector3.distanceSquared(v1, v2);
        }
        static vec3LookAt(spr3d, targetPos, isLocal, forceX, forceY, forceZ) {
            spr3d.transform.lookAt(targetPos, new Laya.Vector3(0, 1, 0), isLocal);
            let rot = spr3d.transform.rotationEuler.clone();
            rot.y += 180;
            if (forceX != null) {
                rot.x = forceX;
            }
            else if (forceY != null) {
                rot.y = forceY;
            }
            else if (forceZ != null) {
                rot.z = forceZ;
            }
            spr3d.transform.rotationEuler = rot;
        }
        static vec3HexToRGB(_hexColor) {
            var color = [], rgb = [];
            let hexColor = _hexColor.replace(/#/, "");
            if (hexColor.length == 3) {
                var tmp = [];
                for (var i = 0; i < 3; i++) {
                    tmp.push(hexColor.charAt(i) + hexColor.charAt(i));
                }
                hexColor = tmp.join("");
            }
            for (var i = 0; i < 3; i++) {
                color[i] = "0x" + hexColor.substr(i * 2, 2);
                rgb.push(parseInt(color[i]));
            }
            return new Laya.Vector3(rgb[0] / 255, rgb[1] / 255, rgb[2] / 255);
        }
        static vec4HexToRGBA(_hexColor) {
            var color = [], rgb = [];
            let hexColor = _hexColor.replace(/#/, "");
            if (hexColor.length == 3) {
                var tmp = [];
                for (var i = 0; i < 3; i++) {
                    tmp.push(hexColor.charAt(i) + hexColor.charAt(i));
                }
                hexColor = tmp.join("");
            }
            for (var i = 0; i < 3; i++) {
                color[i] = "0x" + hexColor.substr(i * 2, 2);
                rgb.push(parseInt(color[i]));
            }
            return new Laya.Vector4(rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, 1);
        }
    }

    class Base3dComponent extends Laya.Script3D {
        onAwake() {
            this.self = this.owner;
            this.init();
        }
        init(...data) { }
        onDestroy() {
            Laya.timer.clearAll(this);
            GlobalCtrl.Event.offAllCaller(this);
        }
    }

    class PlatformApi {
        static init(cb) {
            if (Laya.Browser.window.wx) {
                this.platformApi = Laya.Browser.window.wx;
                this.showShareMenu(true);
                this.regisiterCallback();
            }
            else if (Laya.Browser.window.qg) {
                this.platformApi = Laya.Browser.window.qg;
            }
            if (this.platformApi && GlobalCtrl.CommonData.isSubpackage) {
                GlobalCtrl.Res.addLoadTag("分包");
                this.loadSubpackagesSync(GlobalCtrl.CommonData.subpackageList, this, (isSuccess) => {
                    GlobalCtrl.Res.removeLoadTag("分包");
                    cb && cb(isSuccess);
                });
            }
            else {
                cb && cb(true);
            }
        }
        static vibrateShort() {
            if (this.platformApi && GlobalCtrl.StorageData.isVibrate)
                this.platformApi.vibrateShort();
        }
        static vibrateLong() {
            if (this.platformApi && GlobalCtrl.StorageData.isVibrate)
                this.platformApi.vibrateLong();
        }
        static loadSubpackage(loadName, caller, callback) {
            if (!this.platformApi) {
                callback.call(this, caller, true);
                return;
            }
            let loadTask = this.platformApi.loadSubpackage({
                name: loadName,
                success: function (res) {
                    console.log("分包加载成功：", loadName);
                    callback.call(res, caller, true);
                },
                fail: function (res) {
                    console.error("分包加载失败：", loadName, JSON.stringify(res));
                    callback.call(res, caller, false);
                }
            });
            loadTask.onProgressUpdate(res => {
                console.log("分包进度：", res && res.progress ? res.progress : 100);
            });
        }
        static loadSubpackagesSync(loadNames, caller, callback) {
            if (!this.platformApi) {
                callback.call(this, caller, true);
                return;
            }
            var loadCount = loadNames.length;
            for (let i = 0; i < loadCount; i++) {
                this.loadSubpackage(loadNames[i], caller, (caller, isSuccess) => {
                    if (isSuccess && --loadCount == 0) {
                        console.log("全部分包加载完成");
                        callback.call(this, caller, isSuccess);
                    }
                });
            }
        }
        static regisiterCallback() {
            if (this.platformApi) {
                this.platformApi.onShow(this.onShowEvent);
                this.platformApi.onHide(this.onHideEvent);
            }
        }
        static showShareMenu(ticket) {
            wx.showShareMenu({
                withShareTicket: ticket,
                success: function () { },
                fail: function () { },
                complete: function () { }
            });
        }
        static onShowEvent(e) {
            GlobalCtrl.Event.event(EventType.Platform_Wake_Event, { param: e });
            if (GlobalCtrl.StorageData.isMusic && PlatformApi.audioLoadComplete) {
                GlobalCtrl.Audio.playMusic(AudioType.Bgm);
            }
            else {
                GlobalCtrl.Audio.stopMusic();
            }
        }
        static onHideEvent(e) {
            GlobalCtrl.Event.event(EventType.Platform_Sleep_Event, { param: e });
        }
        static showToast(msg, duration = 1500) {
            if (this.platformApi) {
                this.platformApi.showToast({
                    title: msg,
                    duration: duration,
                    icon: "none"
                });
            }
        }
        static showBannerAd() {
            if (GlobalCtrl.CommonData.canShowBanner) {
                SGAD.showBannerAd(true);
            }
            else {
                SGAD.showBottomGridAd();
            }
        }
        static hideBannerAd() {
            if (GlobalCtrl.CommonData.canShowBanner) {
                SGAD.hideBannerAd();
            }
            else {
                SGAD.hideBottomGridAd();
            }
        }
        static showInterstitialAd() {
            SGAD.showInterstitialAd();
        }
        static visibleGameGridAd(v = true) {
            SGAD.visibleGameGridAd(v);
        }
        static visibleFullGridAd(v = true, cb = () => { }) {
            SGAD.visibleFullGridAd(v);
            SGAD.closeFullGridAdCallback = cb;
        }
        static showVideoAd(finishCB, cancelCB) {
            if (GlobalCtrl.IsStartGame) {
                var isPlay = true;
                GlobalCtrl.IsStartGame = false;
            }
            this.showToast("正在拉起广告");
            SGAD.showVideoAd(finishCB, cancelCB, () => {
                if (GlobalCtrl.StorageData.isMusic) {
                    GlobalCtrl.Audio.playMusic(AudioType.Bgm);
                }
                else {
                    GlobalCtrl.Audio.stopMusic();
                }
                GlobalCtrl.IsStartGame = true;
            }, true);
        }
        static get sdkData() {
            return SGConfig.data;
        }
        static initSDK(cb) {
            SGMgr.init(() => {
                cb();
                if (window.wx) {
                    let o = wx.getSystemInfoSync();
                    let grid = Laya.Browser.window['wx'].createCustomAd({
                        adUnitId: SGAD.fullSingleGridIds[0],
                        adIntervals: 30,
                        style: {
                            left: 0,
                            top: 110
                        }
                    });
                    grid.onError((err) => { console.log('屏幕侧格子加载失败:', JSON.stringify(err)); });
                    grid.onLoad(() => { grid.show(); });
                    this.gridAd = grid;
                }
            });
        }
        static inHome() {
            SGMgr.inHome();
        }
        static inShop() {
            SGMgr.inShop();
        }
        static startGame(cb) {
            SGMgr.startGame(cb);
        }
        static inGame() {
            SGMgr.inGame();
        }
        static gameOver(cb) {
            SGMgr.gameOver(cb);
        }
        static inFinish() {
            SGMgr.inFinish();
        }
        static returnHome(cb) {
            SGMgr.backToHome(cb);
        }
    }
    PlatformApi.audioLoadComplete = true;
    var PlatformType;
    (function (PlatformType) {
        PlatformType[PlatformType["WeiXin"] = 0] = "WeiXin";
        PlatformType[PlatformType["QQ"] = 1] = "QQ";
        PlatformType[PlatformType["Oppo"] = 2] = "Oppo";
        PlatformType[PlatformType["Vivo"] = 3] = "Vivo";
        PlatformType[PlatformType["TouTiao"] = 4] = "TouTiao";
        PlatformType[PlatformType["Android"] = 5] = "Android";
    })(PlatformType || (PlatformType = {}));

    class RoleComponent extends Base3dComponent {
        constructor() {
            super(...arguments);
            this.movRoleList = [];
            this.roleId = null;
            this.roleType = RoleType.Idle;
            this.isCollision = false;
        }
        init(...data) {
        }
        setRoleId(id) {
            this.self = this.owner;
            this.roleId = id;
            this.moveRole();
            this.roleType = RoleType.Start;
        }
        setCollisionRole() {
            this.isCollision = true;
            this.rebirthPos = this.self.transform.position.clone();
            let role = this.self.getChildAt(0);
            this.rebirthPos1 = role.transform.position.clone();
            this.rebirthRot = role.transform.localRotationEuler.clone();
        }
        rebirthState() {
            if (this.isCollision) {
                this.isCollision = false;
                let role = this.self.getChildAt(0);
                role.transform.position = this.rebirthPos1;
                this.self.transform.position = this.rebirthPos;
                role.transform.localRotationEuler = this.rebirthRot;
            }
            this.moveRole();
        }
        testRay() {
            this.hitResult = new Laya.HitResult();
            let pos = this.self.transform.position.clone();
            pos.y = 1;
            let rayLength = 0.8;
            let role = this.self.getChildAt(0);
            let dir = UtilsFunctions.vec3Forward(role);
            dir.y = 1;
            let center = UtilsFunctions.vec3Add(pos, UtilsFunctions.vec3Scale(dir, -rayLength));
            GameLogic.mainScene.physicsSimulation.raycastFromTo(pos, center, this.hitResult);
            if (this.hitResult.succeeded) {
                if (this.hitResult.collider.owner.name.includes('Car'))
                    this.stop();
            }
            else {
                if (this.roleType == RoleType.Stop)
                    this.start();
            }
        }
        stop() {
            this.roleType = RoleType.Stop;
            this.moveRoleTween.clearTween();
        }
        start() {
            this.roleType = RoleType.Start;
            this.moveRole();
        }
        moveRole() {
            if (!this.movRoleList.length) {
                if (GlobalCtrl.CommonData.levelType == 0) {
                    this.movRoleList = [...GlobalCtrl.CommonData['moveRoleList' + GameLogic.getLevel(GlobalCtrl.StorageData.level)][this.roleId]];
                }
                else {
                    this.movRoleList = [...GlobalCtrl.CommonData['moveChallengeRoleList' + GameLogic.getChallengeLevel(GlobalCtrl.StorageData.challengeLevel)][this.roleId]];
                }
            }
            let pos = this.self.transform.position.clone();
            let pos1 = new Laya.Vector3(this.movRoleList[0].x, this.movRoleList[0].y, this.movRoleList[0].z);
            let time = UtilsFunctions.vec3Distance(pos1, pos) * 1000;
            let role = this.self.getChildAt(0);
            role.transform.localRotationEulerY = this.movRoleList[0].angle;
            this.moveRoleTween = new Tween3D;
            this.moveRoleTween.toTween(this.self, { pos: pos1 }, time, () => {
                this.movRoleList.splice(0, 1);
                this.moveRole();
            }, null, false);
        }
        endMove() {
            if (this.moveRoleTween)
                this.moveRoleTween.clearTween();
            this.roleType = RoleType.End;
        }
        onUpdate() {
            if (this.self.destroyed || GlobalCtrl.CommonData.isGameEnd) {
                this.endMove();
                return;
            }
            if (this.roleType == RoleType.Start || this.roleType == RoleType.Stop)
                this.testRay();
        }
    }
    var RoleType;
    (function (RoleType) {
        RoleType[RoleType["Idle"] = 0] = "Idle";
        RoleType[RoleType["Start"] = 1] = "Start";
        RoleType[RoleType["Stop"] = 2] = "Stop";
        RoleType[RoleType["End"] = 3] = "End";
    })(RoleType || (RoleType = {}));

    class CarComponent extends Base3dComponent {
        constructor() {
            super(...arguments);
            this.carIsVertical = false;
            this.moveCarList = [];
            this.isMoveCar = null;
            this.isAlhpa = false;
            this.isTrack = false;
            this.material1 = null;
            this.carId = -1;
            this.isHitDelayMove = false;
            this.isPlayTweem = false;
            this.playCarEngine = 0;
            this.starCar = false;
            this.spd = 0;
            this.pressPoint = new Laya.Point;
            this.onClick = false;
            this.isCollisionRole = false;
            this.isRecoverCar = false;
        }
        init(...data) {
            this.carIsVertical = this.self.transform.localRotationEulerY % 180 == 0;
        }
        initCar() {
            let isCanUpdateColor = GlobalCtrl.CommonData.canUpdateColorCarTypeIdList.findIndex(e => e == GlobalCtrl.StorageData.carSkinId) != -1;
            if (!isCanUpdateColor) {
                return;
            }
            let car = this.self.getChildAt(0);
            let material = car.meshRenderer.material;
            let id = Math.floor(Math.random() * GameLogic.colorList.length);
            this.material = GameLogic.setCarColor(car, id, material.clone());
        }
        setCarId(id) {
            this.carId = id;
        }
        testRay() {
            this.hitResult = new Laya.HitResult();
            this.hitResult1 = new Laya.HitResult();
            this.hitResult2 = new Laya.HitResult();
            let pos = this.self.transform.position.clone();
            pos.y = 1;
            let strList = this.self.name.match(/\d+/g);
            let rayLength = 0.1 + Number(strList[0]) / 2;
            let carHalfWidth = (Number(strList[1]) / 2) * 0.8;
            rayLength = this.spd > 0 ? rayLength : -rayLength;
            let lDir = UtilsFunctions.vec3Right(this.self);
            let froml = UtilsFunctions.vec3Add(pos, UtilsFunctions.vec3Scale(lDir, carHalfWidth));
            let fromr = UtilsFunctions.vec3Add(pos, UtilsFunctions.vec3Scale(lDir, -carHalfWidth));
            let dir = UtilsFunctions.vec3Forward(this.self);
            let tol = UtilsFunctions.vec3Add(froml, UtilsFunctions.vec3Scale(dir, -rayLength));
            let tor = UtilsFunctions.vec3Add(fromr, UtilsFunctions.vec3Scale(dir, -rayLength));
            let center = UtilsFunctions.vec3Add(pos, UtilsFunctions.vec3Scale(dir, -rayLength));
            GameLogic.mainScene.physicsSimulation.raycastFromTo(froml, tol, this.hitResult);
            GameLogic.mainScene.physicsSimulation.raycastFromTo(fromr, tor, this.hitResult1);
            GameLogic.mainScene.physicsSimulation.raycastFromTo(pos, center, this.hitResult2);
            let ownerList = [this.hitResult, this.hitResult1, this.hitResult2]
                .filter(result => result.succeeded)
                .map(result => result.collider.owner)
                .filter((owner, index, array) => array.indexOf(owner) === index)
                .filter(owner => !(owner.name.includes('Car') && owner.getComponent(CarComponent).isAlhpa));
            if (ownerList.length && !this.isAlhpa) {
                if (this.isPlayTweem) {
                    return;
                }
                if (this.isMoveCar == null) {
                    this.playCarEngine = 0;
                    GameLogic.stopCarEngine(0);
                    for (let i = 0; i < ownerList.length; i++) {
                        let owner = ownerList[i];
                        if (owner.name.includes('Role')) {
                            this.isCollisionRole = true;
                            GlobalCtrl.Audio.playSound(AudioType.CarHitWoman);
                            GlobalCtrl.Audio.playSound(AudioType.WomanSound);
                            PlatformApi.vibrateShort();
                            GlobalCtrl.CommonData.isGameEnd = true;
                            let roleComponent = owner.parent.getComponent(RoleComponent);
                            roleComponent.endMove();
                            roleComponent.setCollisionRole();
                            let scaleNum1 = this.spd > 0 ? -1.5 : 1.5;
                            let scaleNum2 = this.spd > 0 ? -3 : 3;
                            let dir = UtilsFunctions.vec3Forward(this.self);
                            let angle = UtilsFunctions.getEulerAngleByVec3(dir, new Laya.Vector3(0, 0, 1));
                            var hitPos1 = UtilsFunctions.vec3Add(owner.transform.position, UtilsFunctions.vec3Scale(dir, scaleNum1));
                            var hitPos2 = UtilsFunctions.vec3Add(owner.transform.position, UtilsFunctions.vec3Scale(dir, scaleNum2));
                            var hitRot1 = owner.transform.rotationEuler.clone();
                            var hitRot2 = hitRot1.clone();
                            hitPos2.y = 0.5;
                            let is180 = owner.transform.localRotationEulerY == 180;
                            let is90 = owner.transform.localRotationEulerY == 90;
                            if (Math.abs(angle - 90) < 1) {
                                let lrDir = UtilsFunctions.vec3Right(this.self);
                                angle = UtilsFunctions.getEulerAngleByVec3(lrDir, new Laya.Vector3(0, 0, 1));
                                if ((angle == 180 && this.spd > 0) || (angle == 0 && this.spd < 0)) {
                                    if (owner.transform.localRotationEulerY % 180 == 0) {
                                        hitRot1.z = is180 ? 70 : -70;
                                        hitRot2.z = is180 ? 90 : -90;
                                    }
                                    else {
                                        hitRot1.x = is90 ? 70 : -70;
                                        hitRot2.x = is90 ? 90 : -90;
                                    }
                                }
                                else {
                                    if (owner.transform.localRotationEulerY % 180 == 0) {
                                        hitRot1.z = is180 ? -70 : 70;
                                        hitRot2.z = is180 ? -90 : 90;
                                    }
                                    else {
                                        hitRot1.x = is90 ? -70 : 70;
                                        hitRot2.x = is90 ? -90 : 90;
                                    }
                                }
                            }
                            else {
                                if ((angle == 180 && this.spd > 0) || (angle == 0 && this.spd < 0)) {
                                    if (owner.transform.localRotationEulerY % 180 == 0) {
                                        hitRot1.x = is180 ? -70 : 70;
                                        hitRot2.x = is180 ? -90 : 90;
                                    }
                                    else {
                                        hitRot1.z = is90 ? 70 : -70;
                                        hitRot2.z = is90 ? 90 : -90;
                                    }
                                }
                                else {
                                    if (owner.transform.localRotationEulerY % 180 == 0) {
                                        hitRot1.x = is180 ? 70 : -70;
                                        hitRot2.x = is180 ? 90 : -90;
                                    }
                                    else {
                                        hitRot1.z = is90 ? -70 : 70;
                                        hitRot2.z = is90 ? -90 : 90;
                                    }
                                }
                            }
                            let tween = new Tween3D;
                            tween.toTween(owner, { pos: hitPos1, rot: hitRot1 }, 300, () => {
                                tween.toTween(owner, { pos: hitPos2, rot: hitRot2 }, 300, () => {
                                    this.playCarEngine = 0;
                                    GlobalCtrl.UI.openScene(UIType.FailUI, false, null, null, Laya.stage);
                                }, null, false);
                            }, null, false);
                            return;
                        }
                    }
                    PlatformApi.vibrateShort();
                    for (let i = 0; i < ownerList.length; i++) {
                        UtilsFunctions.shake3dTarget(ownerList[i], 0.2, 0.2);
                        let smokeFX = GameLogic.getFX('SmokeFX');
                        let pos = ownerList[i].transform.position.clone();
                        pos.y = 2;
                        smokeFX.transform.position = pos;
                        if (ownerList[i].name.includes('Car'))
                            GlobalCtrl.Audio.playSingletonSound(AudioType.CarHit, 1, 500);
                        else
                            GlobalCtrl.Audio.playSingletonSound(AudioType.CarHitWall, 1, 500);
                    }
                    this.starCar = true;
                    let realSpd = this.spd * PlatformApi.sdkData.front_inner_spd;
                    this.self.transform.translate(new Laya.Vector3(0, 0, -realSpd), true);
                    Laya.timer.once(200, this, () => {
                        this.starCar = false;
                        this.spd = 0;
                        if (GlobalCtrl.CommonData.stepNum <= 0) {
                            GlobalCtrl.UI.openScene(UIType.FailUI, false, { type: 1 }, null, Laya.stage);
                        }
                    });
                }
                else {
                    if (this.isPlayTweem) {
                        return;
                    }
                    GlobalCtrl.Audio.playSingletonSound(AudioType.CarMove, 1, 500);
                    let realSpd = this.spd * PlatformApi.sdkData.front_inner_spd;
                    this.self.transform.translate(new Laya.Vector3(0, 0, -realSpd), true);
                    this.moveCarTween.clearTween();
                    this.isMoveCar = CarType.Stop;
                    this.isHitDelayMove = true;
                    Laya.timer.once(100, this, () => {
                        this.isHitDelayMove = false;
                    });
                }
            }
            else {
                if (this.playCarEngine == 0) {
                    this.playCarEngine = 1;
                    GameLogic.playCarEngine();
                }
                if (this.isMoveCar == null)
                    this.detectionBoundary();
                if (this.isMoveCar == CarType.Stop && !this.isHitDelayMove) {
                    this.isMoveCar = CarType.Start;
                    this.moveCar();
                }
            }
        }
        moveCar() {
            if (!this.moveCarList.length) {
                this.isMoveCar = CarType.End;
                this.self.destroy();
                return;
            }
            let pos = this.self.transform.position.clone();
            if (this.moveCarList[0].z != null) {
                pos.z = this.moveCarList[0].z;
            }
            if (this.moveCarList[0].x != null) {
                pos.x = this.moveCarList[0].x;
            }
            let time = UtilsFunctions.vec3Distance(this.self.transform.position.clone(), pos) * PlatformApi.sdkData.front_outer_spd;
            this.moveCarTween = new Tween3D;
            this.moveCarTween.toTween(this.self, { pos }, time, () => {
                if (!this.isRecoverCar)
                    this.recoverCar();
                this.spd = 0.1;
                if (this.moveCarList[0].angleEuler != null) {
                    this.isPlayTweem = true;
                    UtilsFunctions.rotateTarget(this.self, this.moveCarList[0].angleEuler, 300, () => {
                        this.isPlayTweem = false;
                    });
                }
                if (this.moveCarList[0].openRail) {
                    GameLogic.openRail();
                    PlatformApi.vibrateShort();
                    Laya.timer.once(1000, this, () => {
                        this.playCarEngine = 2;
                        GameLogic.stopCarEngine();
                    });
                    GameLogic.delayEnd();
                }
                this.moveCarList.splice(0, 1);
                this.moveCar();
            }, null, false);
        }
        detectionBoundary() {
            let level = GameLogic.getLevel(GlobalCtrl.StorageData.level);
            let listName = 'moveCarList' + level;
            let wallsPoint = GlobalCtrl.CommonData.WallsPointList[level - 1];
            if (GlobalCtrl.CommonData.levelType == 1) {
                let challengeLevel = GlobalCtrl.StorageData.challengeLevel;
                let challengeLevel1 = GameLogic.getChallengeLevel(challengeLevel);
                listName = 'moveChallengeCarList' + (challengeLevel > 1 ? challengeLevel1 : 1);
                wallsPoint = GlobalCtrl.CommonData.ChallengeWallsPointList[challengeLevel > 1 ? challengeLevel1 - 1 : 0];
            }
            let addNum = -(Number(this.self.name.match(/Car_(\d+)_/)[1]) / 2);
            let moveCarList = [...GlobalCtrl.CommonData[listName]];
            if (!this.carIsVertical) {
                if (this.self.transform.position.x + addNum <= wallsPoint.right) {
                    this.starCar = true;
                    moveCarList.splice(0, 1);
                }
                else if (this.self.transform.position.x - addNum >= wallsPoint.left) {
                    this.starCar = true;
                    moveCarList.splice(0, 3);
                }
            }
            else {
                if (this.self.transform.position.z - addNum > wallsPoint.top) {
                    this.starCar = true;
                }
                else if (this.self.transform.position.z + addNum < wallsPoint.bottom) {
                    this.starCar = true;
                    moveCarList.splice(0, 2);
                }
            }
            if (this.starCar) {
                this.moveCarList = moveCarList;
                this.isTrack = true;
                this.isMoveCar = CarType.Start;
                this.moveCar();
                if (GlobalCtrl.CommonData.stepNum <= 0 && GameLogic.getCarIsTrack()) {
                    GlobalCtrl.UI.openScene(UIType.FailUI, false, { type: 1 }, null, Laya.stage);
                }
            }
        }
        onUpdate() {
            if (GlobalCtrl.CommonData.isGameEnd) {
                if (this.moveCarTween)
                    this.moveCarTween.clearTween();
                return;
            }
            if (GlobalCtrl.CommonData.useBuffId != null || this.self.destroyed)
                return;
            if ((this.isMoveCar == CarType.Start || this.isMoveCar == CarType.Stop) && !this.isHitDelayMove) {
                this.testRay();
            }
            if (this.spd != 0 && !this.starCar) {
                let realSpd = this.spd * PlatformApi.sdkData.front_inner_spd;
                this.self.transform.translate(new Laya.Vector3(0, 0, realSpd), true);
                this.testRay();
            }
        }
        onMouseDown() {
            if (GlobalCtrl.StorageData.level == 1 && GlobalCtrl.CommonData.levelType == 0 && GlobalCtrl.CommonData.curGuideIndex != this.carId)
                return;
            if (GlobalCtrl.CommonData.isGameEnd || this.isTrack || !GameLogic.isCanClick || GlobalCtrl.UI.TopScene.url != UIType.GameUI)
                return;
            let useBuffId = GlobalCtrl.CommonData.useBuffId;
            if (useBuffId != null) {
                this.onClick = true;
                let txt = null;
                if (useBuffId == 0) {
                    if (this.self.name.includes('Car_3_2')) {
                        txt = '该车辆已是最短车辆';
                    }
                    else {
                        let car = this.self.getChildAt(0);
                        let car1 = UtilsFunctions.clone3dTarget(GameLogic.prefab.getChildByName('Cars').getChildByName('Cars_' + GlobalCtrl.StorageData.carSkinId).getChildByName('3x2'));
                        let mat = car1.meshRenderer.material.clone();
                        let rot = car.transform.localRotationEuler.clone();
                        let rot1 = car1.transform.localRotationEuler.clone();
                        car1.transform.position = new Laya.Vector3;
                        car1.transform.localRotationEuler = new Laya.Vector3(rot1.x, rot.y, rot.z);
                        car1.meshRenderer.material = new Laya.BlinnPhongMaterial;
                        this.self.addChild(car1);
                        car.destroy();
                        if (GlobalCtrl.CommonData.canUpdateColorCarTypeIdList.findIndex(e => e == GlobalCtrl.StorageData.carSkinId) == -1)
                            this.material1 = mat;
                        this.recoverCar(null, true);
                        if (this.isAlhpa) {
                            let Car_Alpha = GameLogic.prefab.getChildByName('AlphaMat').meshRenderer.sharedMaterial;
                            car1.meshRenderer.sharedMaterial = Car_Alpha;
                        }
                        let collider = this.self.getComponent(Laya.PhysicsCollider);
                        let shape = collider.colliderShape;
                        shape._sizeZ = 3;
                        collider.colliderShape = shape;
                        this.self.name = 'Car_3_2';
                    }
                }
                if (useBuffId == 1) {
                    if (this.isAlhpa) {
                        txt = '该车辆已是透明车辆';
                    }
                    else {
                        this.setAlpha();
                    }
                }
                if (useBuffId == 2) {
                    this.self.destroy();
                    GameLogic.gameIsEnd();
                    GlobalCtrl.Audio.playSound(AudioType.Bomb);
                }
                if (txt) {
                    GameLogic.showToast(txt, 1300);
                }
                else {
                    let buffAmount = GlobalCtrl.StorageData.buffAmount;
                    buffAmount[useBuffId]--;
                    GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.buffAmount, buffAmount);
                    GlobalCtrl.CommonData.useBuffId = null;
                    GlobalCtrl.Event.event(EventType.Update_Buff_Event);
                }
                return;
            }
            if (this.spd != 0)
                return;
            this.pressPoint.x = Laya.stage.mouseX;
            this.pressPoint.y = Laya.stage.mouseY;
            PlatformApi.vibrateShort();
        }
        setAlpha() {
            let Car_Alpha = GameLogic.prefab.getChildByName('AlphaMat').meshRenderer.material;
            this.self.getChildAt(0).meshRenderer.sharedMaterial = Car_Alpha;
            this.isAlhpa = true;
        }
        onMouseUp() {
            if (!GameLogic.isCanClick || GlobalCtrl.UI.TopScene.url != UIType.GameUI)
                return;
            this.onClick = false;
        }
        onMouseDrag() {
            if (GlobalCtrl.CommonData.stepNum < 0) {
                GlobalCtrl.Event.event(EventType.Update_StepNum_Event);
                return;
            }
            let isLevel1Type0 = GlobalCtrl.StorageData.level == 1 && GlobalCtrl.CommonData.levelType == 0;
            let isGuideIndexMatch = GlobalCtrl.CommonData.curGuideIndex == this.carId;
            if (isLevel1Type0 && !isGuideIndexMatch)
                return;
            if (GlobalCtrl.CommonData.isGameEnd || this.isTrack || this.spd != 0 || this.onClick || !GameLogic.isCanClick || GlobalCtrl.UI.TopScene.url != UIType.GameUI)
                return;
            let spd = 0;
            if (!this.carIsVertical) {
                if (this.pressPoint.x > Laya.stage.mouseX) {
                    spd = this.self.transform.localRotationEulerY == -90 ? -0.1 : 0.1;
                }
                else if (this.pressPoint.x < Laya.stage.mouseX) {
                    spd = this.self.transform.localRotationEulerY == -90 ? 0.1 : -0.1;
                }
            }
            else {
                if (this.pressPoint.y > Laya.stage.mouseY) {
                    spd = this.self.transform.localRotationEulerY == 180 ? -0.1 : 0.1;
                }
                else if (this.pressPoint.y < Laya.stage.mouseY) {
                    spd = this.self.transform.localRotationEulerY == 180 ? 0.1 : -0.1;
                }
            }
            if (spd > 0 && isLevel1Type0 && isGuideIndexMatch)
                GlobalCtrl.Event.event(EventType.Update_GameGuide_Event);
            if (spd <= 0 && isLevel1Type0 && isGuideIndexMatch)
                return;
            this.spd = spd;
            if (this.spd != 0) {
                GlobalCtrl.CommonData.stepNum--;
                GlobalCtrl.Event.event(EventType.Update_StepNum_Event);
            }
            this.rebirthPos = this.self.transform.position.clone();
        }
        recoverCar(material, isUpdateSkin = false) {
            let isCanUpdateColor = GlobalCtrl.CommonData.canUpdateColorCarTypeIdList.findIndex(e => e == GlobalCtrl.StorageData.carSkinId) != -1;
            if (material) {
                this.material = material;
                this.material1 = material;
            }
            let car = this.self.getChildAt(0);
            if (isCanUpdateColor) {
                car.meshRenderer.material = this.material;
            }
            else {
                car.meshRenderer.material = this.material1;
            }
            if (!material && !isUpdateSkin)
                this.isRecoverCar = true;
            if (!isUpdateSkin)
                this.isAlhpa = false;
            else {
                if (this.isAlhpa)
                    this.setAlpha();
            }
        }
    }
    var CarType;
    (function (CarType) {
        CarType[CarType["Start"] = 0] = "Start";
        CarType[CarType["Stop"] = 1] = "Stop";
        CarType[CarType["End"] = 2] = "End";
    })(CarType || (CarType = {}));

    class GameLogic {
        static init() {
            GlobalCtrl.CommonData.levelType = GlobalCtrl.StorageData.level > 1 ? 1 : 0;
            GlobalCtrl.Event.on(EventType.Game_Init_Event, this, this.gameInit);
            GlobalCtrl.Event.on(EventType.Game_Play_Event, this, this.gamePlay);
            GlobalCtrl.Event.on(EventType.Game_Over_Event, this, this.gameOver);
            GlobalCtrl.Event.on(EventType.Game_Reborn_Event, this, this.gameReborn);
            this.loadSceneRes();
            this.initGameEvent();
            if (Laya.Browser.onWeiXin) {
                this.playMusic();
            }
            else {
                Laya.timer.once(1000, this, () => { GlobalCtrl.Audio.playMusic(AudioType.Bgm); });
            }
        }
        static initFX(pos) {
            if (!this.isInitFX) {
                this.fx._children.forEach(element => {
                    let fx = this.getFX(element.name, 5000);
                    this.parent.addChild(fx);
                    fx.transform.position = pos;
                    fx.transform.setWorldLossyScale(new Laya.Vector3(0.01, 0.01, 0.01));
                });
                this.isInitFX = true;
            }
        }
        static getFX(name, time = 1000) {
            let fx = UtilsFunctions.clone3dTarget(this.fx.getChildByName(name));
            this.parent.addChild(fx);
            if (time != -1) {
                Laya.timer.once(time, this, () => {
                    fx.destroy();
                });
            }
            return fx;
        }
        static createShadow(light, mode = Laya.ShadowMode.None) {
            light.shadowMode = mode;
            light.shadowDistance = 60;
            light.shadowResolution = 2048;
            light.shadowCascadesMode = Laya.ShadowCascadesMode.NoCascades;
            light.shadowNormalBias = 0;
            light.shadowStrength;
        }
        static loadSceneRes() {
            GlobalCtrl.Res.addLoadTag("资源");
            GlobalCtrl.Res.load(GlobalCtrl.CommonData.lsUrl, (s) => {
                this.mainScene = s;
                let camera = s.getChildByName("Camera");
                this.mainCamera = camera.getChildByName("Main Camera");
                this.mainCamera.enableHDR = false;
                UtilsFunctions.fixCameraField(this.mainCamera);
                this.createShadow(s.getChildByName("Directional Light"), Laya.ShadowMode.SoftHigh);
                Laya.stage.addChild(s);
                Laya.stage.setChildIndex(s, 0);
                this.parent = s.getChildByName("Parent");
                this.prefab = s.getChildByName("Prefab");
                this.prefab.active = false;
                GlobalCtrl.Res.removeLoadTag("资源");
                this.cameraFX = camera.getChildByName("CameraFX");
                this.cameraFX.active = false;
                this.fx = this.prefab.getChildByName("FX");
                this.initFX(new Laya.Vector3);
            }, null, "场景");
        }
        static createGameByLevel() {
            this.isCanClick = false;
            this.gameCarAmount = 0;
            this.parent.destroyChildren();
            let levelName = 'Level_' + this.getLevel(GlobalCtrl.StorageData.level);
            let challengeLevel = GlobalCtrl.StorageData.challengeLevel;
            let challengeLevel1 = this.getChallengeLevel(challengeLevel);
            if (GlobalCtrl.CommonData.levelType == 1 && challengeLevel > 1)
                levelName = 'ChallengeLevel_' + challengeLevel1;
            let levelSpr = UtilsFunctions.clone3dTarget(this.prefab.getChildByName('Levels').getChildByName(levelName));
            this.parent.addChild(levelSpr);
            levelSpr.transform.position = new Laya.Vector3;
            if (GlobalCtrl.CommonData.levelType == 1 && challengeLevel > 1) {
                let challengeCameraInfo = GlobalCtrl.CommonData['challengeCameraInfo' + challengeLevel1];
                this.mainCamera.fieldOfView = challengeCameraInfo.fov;
                levelSpr.transform.position = new Laya.Vector3(challengeCameraInfo.x, challengeCameraInfo.y, challengeCameraInfo.z);
            }
            let Cars = UtilsFunctions.getForeachChildByName(levelSpr, 'Cars');
            for (let i = 0; i < Cars.numChildren; i++) {
                let car = Cars.getChildAt(i);
                car.addComponent(CarComponent).setCarId(i);
                let scalCar = car.getChildAt(0);
                scalCar.transform.localScale = new Laya.Vector3(0, 0, 0);
                let tw = new Tween3D;
                tw.toTween(scalCar, { sca: new Laya.Vector3(100, 100, 100) }, 800, () => {
                    if (i + 1 >= Cars.numChildren)
                        this.isCanClick = true;
                });
            }
            this.gameCarAmount = Cars.numChildren;
            let Roles = UtilsFunctions.getForeachChildByName(levelSpr, 'Roles');
            if (Roles) {
                for (let i = 0; i < Roles.numChildren; i++) {
                    Roles.getChildAt(i).addComponent(RoleComponent).setRoleId(i);
                }
            }
            this.rail = UtilsFunctions.getForeachChildByName(levelSpr, 'Rail_1');
            this.cars = Cars;
            this.roles = Roles;
            this.updateCarSkin();
            this.updateRoleSkin();
            GlobalCtrl.CommonData.stepNum = Cars.numChildren + 5;
            GlobalCtrl.CommonData.levelTime = 480;
        }
        static getChallengeLevel(value) {
            let array = [2, 3, 4, 5];
            if (value >= 6) {
                return array[(value - 6) % array.length];
            }
            else {
                return array[value - 2];
            }
        }
        static delayEnd() {
            Laya.timer.once(2000, this, () => { this.gameIsEnd(); });
        }
        static gameIsEnd() {
            this.gameCarAmount--;
            if (GlobalCtrl.CommonData.levelType == 1)
                GlobalCtrl.Event.event(EventType.Update_CarNum_Event);
            if (this.gameCarAmount > 0) {
                return;
            }
            GlobalCtrl.CommonData.isGameEnd = true;
            this.clearUpdateTimeLoop();
            this.cameraFX.active = true;
            if (GlobalCtrl.CommonData.levelType == 0) {
                GlobalCtrl.Storage.passLevel(true);
                GlobalCtrl.CommonData.levelType = 1;
                GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.challengeLevel, GlobalCtrl.StorageData.challengeLevel + 1);
            }
            else {
                GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.challengeLevel, GlobalCtrl.StorageData.challengeLevel + 1);
            }
            GlobalCtrl.Audio.playSound(AudioType.Win);
            Laya.timer.once(1300, this, () => {
                this.cameraFX.active = false;
                GlobalCtrl.UI.openScene(UIType.PuzzleUI, false, null, null, Laya.stage);
            });
        }
        static loadModelRes(cb) {
        }
        static initGameEvent() {
        }
        static gameInit(args) {
            this.createGameByLevel();
            GlobalCtrl.IsStartGame = false;
            this.gamePlay();
        }
        static playMusic() {
            if (PlatformApi.audioLoadComplete) {
                GlobalCtrl.Audio.playMusic(AudioType.Bgm);
            }
            else {
                Laya.timer.once(500, this, this.playMusic);
            }
        }
        static gamePlay(args) {
            GlobalCtrl.IsStartGame = true;
            GlobalCtrl.CommonData.isGameEnd = false;
            GlobalCtrl.UI.openScene(UIType.GameUI, true, null, null, Laya.stage);
        }
        static gameOver(args) {
            GlobalCtrl.IsStartGame = false;
            let delayTime = args.delayTime != null ? args.delayTime : 1000;
            Laya.timer.once(delayTime, this, () => {
                GlobalCtrl.UI.openScene(UIType.OverUI, true, args, null, Laya.stage);
            });
        }
        static showToast(str, time = 1000) {
            let img = GlobalCtrl.Prefab.getItem(PrefabType.InfoToast);
            let lb = img.getChildAt(0);
            lb.text = str;
            Laya.stage.addChild(img);
            img.centerX = 0;
            img.centerY = 0;
            Laya.timer.once(time * 0.5, this, () => {
                Laya.Tween.to(img, { centerY: -200 }, time * 0.5);
            });
            Laya.timer.once(time * 0.8, this, () => {
                Laya.Tween.to(img, { alpha: 0 }, time * 0.2, null, Laya.Handler.create(this, () => {
                    img.destroy();
                }));
            });
        }
        static isCanUseBuff(index) {
            for (let i = 0; i < this.cars.numChildren; i++) {
                let car = this.cars.getChildAt(i).getComponent(CarComponent);
                if (car.isTrack)
                    continue;
                if (!car.owner.name.includes('Car_3_2') && index == 0)
                    return true;
                if (!car.isAlhpa && index == 1)
                    return true;
                if (index == 2)
                    return true;
            }
            return false;
        }
        static loadJsonFile() {
            GlobalCtrl.Res.load("res/json/GameConfig.json", (data) => {
                this.gameConfig = data;
            }, null, "配置");
        }
        static gameReborn(args) {
            for (let i = 0; i < this.cars.numChildren; i++) {
                let car = this.cars.getChildAt(i);
                let carComponent = car.getComponent(CarComponent);
                if (carComponent.isCollisionRole) {
                    carComponent.isCollisionRole = false;
                    carComponent.spd = 0;
                    car.transform.position = carComponent.rebirthPos;
                }
                else {
                    if (carComponent.moveCarList.length) {
                        carComponent.moveCar();
                    }
                }
            }
            GlobalCtrl.CommonData.isGameEnd = false;
            for (let i = 0; i < this.roles.numChildren; i++) {
                this.roles.getChildAt(i).getComponent(RoleComponent).rebirthState();
            }
            for (let i = 0; i < this.cars.numChildren; i++) {
                let car = this.cars.getChildAt(i).getComponent(CarComponent);
                if (car.playCarEngine == 1) {
                    this.playCarEngine();
                    return;
                }
            }
            this.updateTimeLoop();
        }
        static openRail() {
            GlobalCtrl.Audio.playSound(AudioType.CarPass);
            Laya.timer.clear(this, this.closeRail);
            Laya.timer.once(1200, this, this.closeRail);
            let rail = UtilsFunctions.getForeachChildByName(this.rail, 'Barrier');
            let blocksFX = this.getFX('BlocksFX');
            let pos = rail.transform.position.clone();
            pos.x -= 3;
            pos.y += 5;
            blocksFX.transform.position = pos;
            if (!this.isCloseRail)
                return;
            this.isCloseRail = false;
            let anim = this.rail.getComponent(Laya.Animator);
            anim.crossFade("RailAnim_Open", 0.2);
        }
        static closeRail() {
            let anim = this.rail.getComponent(Laya.Animator);
            anim.crossFade("RailAnim_Close", 0.5);
            this.isCloseRail = true;
        }
        static getLevel(level) {
            if (level <= 39)
                return level;
            let minRange = Math.floor((level - 40) / 10) % 2 === 0 ? 20 : 30;
            let maxRange = minRange + 10;
            let result = minRange + (level - 40) % 10;
            return result > maxRange ? maxRange : result;
        }
        static playCarEngine() {
            if (this.CarEngine)
                return;
            GlobalCtrl.Audio.playSound(AudioType.CarEngine, 0);
            this.CarEngine = true;
        }
        static stopCarEngine(time = 1000) {
            for (let i = 0; i < this.cars.numChildren; i++) {
                let car = this.cars.getChildAt(i).getComponent(CarComponent);
                if (car.playCarEngine == 1)
                    return;
            }
            Laya.timer.once(time, this, () => {
                this.CarEngine = false;
                GlobalCtrl.Audio.stopSound(AudioType.CarEngine);
            });
        }
        static updateCarSkin() {
            let carSkinId = GlobalCtrl.StorageData.carSkinId;
            let cars = this.prefab.getChildByName('Cars').getChildByName('Cars_' + carSkinId);
            let names = [];
            let oldShareMat = [];
            let newShareMat = new Laya.BlinnPhongMaterial;
            for (let i = 0; i < this.cars.numChildren; i++) {
                let carBox = this.cars.getChildAt(i);
                let car = carBox.getChildAt(0);
                let car1 = UtilsFunctions.clone3dTarget(cars.getChildByName(car.name));
                let rot = car.transform.localRotationEuler.clone();
                let rot1 = car1.transform.localRotationEuler.clone();
                let carComponent = carBox.getComponent(CarComponent);
                car1.transform.position = new Laya.Vector3;
                car1.transform.localRotationEuler = new Laya.Vector3(rot1.x, rot.y, rot.z);
                car.destroy();
                let oldShareMatIndex = names.indexOf(car1.name);
                if (oldShareMatIndex == -1) {
                    names.push(car1.name);
                    oldShareMat.push(car1.meshRenderer.material.clone());
                    oldShareMatIndex = oldShareMat.length - 1;
                }
                let mat = oldShareMat[oldShareMatIndex];
                car1.meshRenderer.material = newShareMat;
                carBox.addChild(car1);
                carComponent.recoverCar(mat, true);
                carComponent.initCar();
            }
            this.isCanClick = true;
        }
        static updateRoleSkin() {
            if (!this.roles)
                return;
            let roleSkinId = GlobalCtrl.StorageData.roleSkinId;
            for (let i = 0; i < this.roles.numChildren; i++) {
                let roleBox = this.roles.getChildAt(i);
                let role = roleBox.getChildAt(0);
                let role1 = UtilsFunctions.clone3dTarget(this.prefab.getChildByName('Roles').getChildByName('Role_' + roleSkinId));
                let rot = role.transform.localRotationEuler.clone();
                let roleComponent = roleBox.getComponent(RoleComponent);
                roleComponent.stop();
                role1.transform.position = new Laya.Vector3(0, -1, 0);
                role1.transform.localRotationEuler = new Laya.Vector3(0, rot.y, 0);
                role.destroy();
                let mat = role1.meshRenderer.material.clone();
                role1.meshRenderer.material = new Laya.BlinnPhongMaterial;
                roleBox.addChild(role1);
                role1.meshRenderer.material = mat;
                roleComponent.start();
            }
        }
        static setCarColor(car, id, carMat) {
            if (this.matIds.indexOf(id) == -1) {
                this.matIds.push(id);
                this.mats.push(carMat);
                let color = UtilsFunctions.vec4HexToRGBA(this.colorList[id]);
                carMat.albedoColor = color;
            }
            else {
                carMat = this.mats[this.matIds.indexOf(id)];
            }
            car.meshRenderer.material = carMat;
            return carMat;
        }
        static updateLevelTime() {
            if (this.levelTimeIsStart)
                return;
            this.levelTimeIsStart = true;
            let commonData = GlobalCtrl.CommonData;
            let time = commonData.levelTime;
            if (time <= 0) {
                this.levelTimeIsStart = false;
                GlobalCtrl.CommonData.levelTime = 0;
                return;
            }
            ;
            this.updateTimeLoop = () => {
                if (!GlobalCtrl.IsStartGame)
                    return;
                time = GlobalCtrl.CommonData.levelTime;
                time--;
                time = Math.ceil(time);
                GlobalCtrl.CommonData.levelTime = Math.max(0, time);
                let timeStr = time <= 0 ? null : this.formatTime(time);
                GlobalCtrl.Event.event(EventType.Update_LevelTime_Event, { timeStr });
                if (time <= 0) {
                    this.levelTimeIsStart = false;
                    Laya.timer.clear(this, this.updateTimeLoop);
                }
            };
            Laya.timer.loop(1000, this, this.updateTimeLoop);
        }
        static clearUpdateTimeLoop() {
            this.levelTimeIsStart = false;
            Laya.timer.clear(this, this.updateTimeLoop);
        }
        static formatTime(seconds) {
            const days = Math.floor(seconds / (3600 * 24));
            const hours = Math.floor((seconds % (3600 * 24)) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const remainingSeconds = seconds % 60;
            return `${minutes}：${remainingSeconds < 10 ? '0' + remainingSeconds : remainingSeconds}`;
        }
        static getCarIsTrack() {
            for (let i = 0; i < this.cars.numChildren; i++) {
                let car = this.cars.getChildAt(i).getComponent(CarComponent);
                if (!car.isTrack) {
                    return true;
                }
            }
            return false;
        }
    }
    GameLogic.isInitFX = false;
    GameLogic.gameCarAmount = 0;
    GameLogic.isCloseRail = true;
    GameLogic.CarEngine = false;
    GameLogic.matIds = [];
    GameLogic.mats = [];
    GameLogic.colorList = [
        '#D057A7', '#D9FF00', '#FF6D00', '#FFD400', '#0094FF', '#43A800', '#C74AD6', '#CC3D3D', '#1E7D44',
        '#009289'
    ];
    GameLogic.levelTimeIsStart = false;
    class GameConfig {
    }
    class ObjConfig {
    }
    class UpgradeConfig {
    }

    class FailUI extends BaseUI {
        constructor() {
            super(...arguments);
            this.failType = 0;
        }
        openUIDelay(param) {
            GlobalCtrl.CommonData.isGameEnd = true;
            GameLogic.CarEngine = false;
            GlobalCtrl.Audio.stopSound(AudioType.CarEngine);
            GlobalCtrl.Audio.playSound(AudioType.Fail);
            GameLogic.clearUpdateTimeLoop();
            if (param && param.type) {
                this.failType = param.type;
                let lbText = this.FailBox1.getChildAt(0);
                let lbBtnText = this.btnRebirth.getChildAt(0);
                lbText.text = this.failType == 1 ? '步数不足 ！' : '时间不足 ！';
                lbBtnText.text = this.failType == 1 ? '步数 +3' : '时间 +60s！';
                this.FailBox1.visible = true;
            }
            else {
                this.FailBox.visible = true;
            }
            this.FailBox1.visible = this.failType != 0;
            Tween2D.toScale(this.btnRebirth, 1, 1.2, 500, null, null, false, true);
            if (PlatformApi.gridAd)
                PlatformApi.gridAd.hide();
        }
        clickButton(key) {
            switch (key) {
                case "btnRebirth":
                    PlatformApi.showVideoAd(() => {
                        if (this.failType == 1) {
                            GlobalCtrl.CommonData.stepNum = 3;
                            GlobalCtrl.Event.event(EventType.Update_StepNum_Event);
                        }
                        if (this.failType == 2) {
                            GlobalCtrl.CommonData.levelTime = 60;
                        }
                        GlobalCtrl.Event.event(EventType.Game_Reborn_Event);
                        this.closeScene();
                    });
                    break;
                case "btnAgain":
                    GlobalCtrl.Event.event(EventType.Game_Init_Event);
                    this.closeScene();
                    break;
            }
        }
        closeUI() {
            Tween2D.clear(this.btnRebirth);
            if (PlatformApi.gridAd)
                PlatformApi.gridAd.show();
        }
    }

    var Sprite = Laya.Sprite;
    class GameGuide {
        constructor(stepIndex, startIndex = 0) {
            this.guideSteps = [
                { finger: "gameUI/game/ty_zy_sz.png", fingerX: Laya.stage.width / 2 + 15, fingerEndY: Laya.stage.height / 2 + 80, fingerY: Laya.stage.height / 2 - 70 },
                { finger: "gameUI/game/ty_zy_sz.png", fingerX: Laya.stage.width / 2 - 80, fingerEndX: Laya.stage.width / 2 + 200, fingerY: Laya.stage.height / 2 - 100 },
                { finger: "gameUI/game/ty_zy_sz.png", fingerX: Laya.stage.width / 2 + 50, fingerEndX: Laya.stage.width / 2 - 200, fingerY: Laya.stage.height / 2 - 170 },
            ];
            this.guideStepIndex = 0;
            this.tipFinger = new Sprite();
            Laya.stage.addChild(this.tipFinger);
            this.tipFinger.zOrder = 100;
            this.guideStepIndex = startIndex;
            if (stepIndex == null) {
                Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.nextStep);
                this.nextStep();
            }
            else {
                this.selectStep(stepIndex);
            }
        }
        selectStep(stepIndex) {
            var step = this.guideSteps[stepIndex];
            this.tipFinger.graphics.clear();
            if (step.finger) {
                this.tipFinger.visible = true;
                this.tipFinger.loadImage(step.finger);
                this.tipFinger.rotation = 0;
                this.tipFinger.pos(step.fingerX, step.fingerY);
                if (step.fingerRot != null) {
                    this.tipFinger.pivot(this.tipFinger.width * 0.5, this.tipFinger.height * 0.5);
                    Tween2D.clear(this.tipFinger);
                    Tween2D.toRotation(this.tipFinger, step.fingerRot, 200, true, true);
                }
                else if (step.fingerEndY != null) {
                    Tween2D.clear(this.tipFinger);
                    Tween2D.toPosition(this.tipFinger, { x: step.fingerX, y: step.fingerEndY }, 800, null, null, true);
                }
                else if (step.fingerEndX != null) {
                    Tween2D.clear(this.tipFinger);
                    Tween2D.toPosition(this.tipFinger, { x: step.fingerEndX, y: step.fingerY }, 1000, null, null, true);
                }
            }
            else {
                this.tipFinger.visible = false;
            }
        }
        showStep() {
            if (this.guideContainer)
                this.guideContainer.visible = true;
            this.tipContainer.visible = true;
            this.tipFinger.visible = true;
        }
        hideStep() {
            this.tipFinger.visible = false;
        }
        finishStep() {
            this.hideStep();
            this.tipFinger.graphics.clear();
            Tween2D.clear(this.tipFinger);
            Laya.stage.removeChild(this.tipFinger);
            this.tipFinger.destroy();
        }
        nextStep() {
            if (this.guideStepIndex == this.guideSteps.length) {
                Laya.stage.off(Laya.Event.MOUSE_DOWN, this, this.nextStep);
                this.finishStep();
            }
            else {
                this.selectStep(this.guideStepIndex++);
            }
        }
    }

    class GameUI extends BaseUI {
        showGuide(index) {
            if (this.curGuideIndex == index)
                return;
            if (this.curGuide == null) {
                this.curGuide = new GameGuide(index);
            }
            else {
                this.curGuide.selectStep(index);
            }
            this.curGuideIndex = index;
        }
        hideGuide(nextStep) {
            if (this.curGuide != null)
                this.curGuide.finishStep();
            this.curGuide = null;
            this.curGuideIndex = null;
            if (nextStep != null) {
                GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.guideStep, nextStep);
            }
        }
        initUI() {
            super.initUI();
            GlobalCtrl.Event.on(EventType.Update_StepNum_Event, this, () => {
                this.updateStepNum();
                GameLogic.updateLevelTime();
            });
            GlobalCtrl.Event.on(EventType.Update_LevelTime_Event, this, (e) => {
                if (e && e.timeStr) {
                    this.lbTime.text = '时间：' + e.timeStr;
                }
                else {
                    this.lbTime.text = '时间：0';
                    GlobalCtrl.UI.openScene(UIType.FailUI, false, { type: 2 }, null, Laya.stage);
                }
            });
            if (GlobalCtrl.CommonData.canShowBanner) {
            }
            Tween2D.toScale(this.btnLevelType, 1, 1.1, 1000, null, null, true, true);
            GlobalCtrl.Event.on(EventType.Update_Buff_Event, this, this.updateBuff);
            GlobalCtrl.Event.on(EventType.Update_CarNum_Event, this, () => {
            });
            GlobalCtrl.Event.on(EventType.Update_GameGuide_Event, this, () => {
                if (this.curGuideIndex == 2) {
                    this.hideGuide(1);
                    return;
                }
                this.showGuide(this.curGuideIndex + 1);
                GlobalCtrl.CommonData.curGuideIndex++;
            });
            let level = GlobalCtrl.StorageData.level;
            this.btnLevelType.visible = false;
            this.btnDestroyCar.visible = level != 1;
            this.btnLucencyCar.visible = level != 1;
            this.btnLessenCar.visible = level != 1;
            this.btnSkin.visible = level != 1;
            this.btnSet.visible = level != 1;
            this['btnPuzzle'].visible = level != 1;
            this['btnAddCoin'].visible = level != 1;
            this['lbLevel'].visible = level != 1;
            this['btnAddTime'].visible = level != 1;
            this['btnAddStep'].visible = level != 1;
            this.astrictImg.visible = level != 1;
            this.updateBuff();
            this.updateStepNum();
            if (GlobalCtrl.CommonData.levelType == 0) {
                this.btnLevelType.skin = 'gameUI/game/ty_anniu.png';
                this.levelTxt.text = '关卡模式';
                this.lbLevel.text = '关卡 ' + level;
            }
            else {
                this.levelTxt.text = '挑战模式';
                this.btnLevelType.skin = 'gameUI/game/js_anniu_1.png';
                this.lbLevel.text = '关卡 ' + GlobalCtrl.StorageData.challengeLevel;
            }
            if (level == 1 && GlobalCtrl.CommonData.levelType == 0) {
                this.showGuide(0);
                GlobalCtrl.CommonData.curGuideIndex = 0;
            }
        }
        updateStepNum() {
            let level = GlobalCtrl.StorageData.level;
            if (level <= 1)
                return;
            let stepNum = GlobalCtrl.CommonData.stepNum;
            this.lbStepNum.text = '步数：' + (stepNum <= 0 ? 0 : stepNum);
            if (stepNum < 0 && !GlobalCtrl.CommonData.isGameEnd) {
                GlobalCtrl.CommonData.isGameEnd = true;
                GlobalCtrl.UI.openScene(UIType.FailUI, false, { type: 1 }, null, Laya.stage);
            }
        }
        openUIDelay(param) {
            PlatformApi.showBannerAd();
        }
        updateBuff() {
            let buffBtnList = [this.btnLessenCar, this.btnLucencyCar, this.btnDestroyCar];
            let storageData = GlobalCtrl.StorageData;
            let buffAmount = storageData.buffAmount;
            for (let i = 0; i < 3; i++) {
                let img = buffBtnList[i].getChildAt(0);
                let lbNum = img.getChildByName('lbNum');
                lbNum.text = String(buffAmount[i]);
                lbNum.visible = buffAmount[i] > 0;
                img.getChildByName('adImg').visible = buffAmount[i] <= 0;
            }
        }
        clickButton(key) {
            switch (key) {
                case 'btnDestroyCar':
                    this.clickBuffBtn(2);
                    break;
                case 'btnLucencyCar':
                    this.clickBuffBtn(1);
                    break;
                case 'btnLessenCar':
                    this.clickBuffBtn(0);
                    break;
                case 'btnLevelType':
                    GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.challengeLevel, 2);
                    GameLogic.CarEngine = false;
                    GlobalCtrl.Audio.stopSound(AudioType.CarEngine);
                    GlobalCtrl.CommonData.levelType = GlobalCtrl.CommonData.levelType == 0 ? 1 : 0;
                    GlobalCtrl.Event.event(EventType.Game_Init_Event);
                    break;
                case 'btnSet':
                    GlobalCtrl.UI.openScene(UIType.SetUI, false, null, null, Laya.stage);
                    break;
                case 'btnSkin':
                    GlobalCtrl.UI.openScene(UIType.SkinUI, false, null, null, Laya.stage);
                    break;
                case 'btnPuzzle':
                    GlobalCtrl.UI.openScene(UIType.PuzzleUI1, false, null, null, Laya.stage);
                    break;
                case 'btnAddCoin':
                    GlobalCtrl.UI.openScene(UIType.GetCoinUI, false, null, null, Laya.stage);
                    break;
                case 'btnReset':
                    GlobalCtrl.CommonData.isGameEnd = true;
                    GameLogic.CarEngine = false;
                    GlobalCtrl.Audio.stopSound(AudioType.CarEngine);
                    GameLogic.clearUpdateTimeLoop();
                    GlobalCtrl.Event.event(EventType.Game_Init_Event);
                    break;
                case 'btnAddTime':
                    PlatformApi.showVideoAd(() => {
                        GlobalCtrl.CommonData.levelTime += 30;
                        this.lbTime.text = '时间：' + GameLogic.formatTime(GlobalCtrl.CommonData.levelTime);
                    });
                    break;
                case 'btnAddStep':
                    PlatformApi.showVideoAd(() => {
                        GlobalCtrl.CommonData.stepNum += 3;
                        this.updateStepNum();
                    });
                    break;
            }
        }
        clickBuffBtn(index) {
            let storageData = GlobalCtrl.StorageData;
            let buffAmount = storageData.buffAmount;
            if (buffAmount[index]) {
                let isCanUseBuff = GameLogic.isCanUseBuff(index);
                let txt = '当前关卡暂无车辆可缩短';
                if (index == 1)
                    txt = '当前关卡暂无车辆可透明';
                if (index == 2)
                    txt = '当前关卡暂无车辆可删除';
                GameLogic.showToast(isCanUseBuff ? '请点击任意车辆' : txt, 1300);
                if (isCanUseBuff) {
                    GlobalCtrl.CommonData.useBuffId = index;
                }
            }
            else {
                PlatformApi.showVideoAd(() => {
                    buffAmount[index]++;
                    GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.buffAmount, buffAmount);
                    this.updateBuff();
                });
            }
        }
        closeUI() {
        }
    }

    class GetBuffUI extends BaseUI {
        constructor() {
            super(...arguments);
            this.buffAmountIndex = null;
        }
        initUI() {
            super.initUI();
        }
        openUIDelay(param) {
            this.buffAmountIndex = param.buffAmountIndex;
            let lbBuffTitle = '缩短车辆';
            let buffImgSkin = 'gameUI/game/ty_sxcl.png';
            if (this.buffAmountIndex == 1) {
                lbBuffTitle = '透明车辆';
                buffImgSkin = 'gameUI/game/ty_tmcl.png';
            }
            if (this.buffAmountIndex == 2) {
                lbBuffTitle = '删除车辆';
                buffImgSkin = 'gameUI/game/ty_yccl.png';
            }
            this.lbBuffTitle.text = lbBuffTitle;
            this.buffImg.skin = buffImgSkin;
        }
        clickButton(key) {
            let storageData = GlobalCtrl.StorageData;
            let buffAmount = storageData.buffAmount;
            switch (key) {
                case 'btnGet':
                    PlatformApi.showVideoAd(() => {
                        buffAmount[this.buffAmountIndex]++;
                        GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.buffAmount, buffAmount);
                        GlobalCtrl.Event.event(EventType.Update_Buff_Event);
                        this.closeScene();
                    });
                    break;
            }
        }
        closeUI() {
        }
    }

    class GetCoinUI extends BaseUI {
        initUI() {
            super.initUI();
        }
        openUIDelay(param) {
        }
        clickButton(key) {
            switch (key) {
                case 'btnGet':
                    PlatformApi.showVideoAd(() => {
                        GlobalCtrl.Storage.updateCoin(300);
                        this.closeScene();
                    });
                    break;
            }
        }
        closeUI() {
        }
    }

    class LoadUI extends BaseUI {
        constructor() {
            super(...arguments);
            this.isShowingLogoTween = false;
            this.progress = 0;
        }
        openUIDelay(param) {
            var graphics = this.bg.graphics._one;
            var heightRatio = Math.ceil(Laya.stage.height / 196);
            var height = heightRatio * 196;
            graphics.height = height * 2;
            Laya.timer.frameLoop(1, this, () => {
                graphics.y -= 1;
                if (graphics.y == -height) {
                    graphics.y = 0;
                }
            });
            if (param.isShowLogoTween) {
                this.showLogoTween(param.gameLogoUrl, param.companyLogoUrl, param.logoSize);
            }
            this.showProgress(true, true, false);
            Laya.timer.once(1000, this, () => {
                this.size(Laya.stage.width, Laya.stage.height);
            });
        }
        closeUI() {
            if (this.isShowingLogoTween) {
                Tween2D.clear(this.imgLogo);
            }
        }
        showLogoTween(gameLogoUrl, companyLogoUrl, scale = 1) {
            if (this.imgLogo) {
                this.isShowingLogoTween = true;
                let panel = new Laya.Panel;
                this.addChild(panel);
                panel.size(Laya.stage.width, Laya.stage.height);
                panel.bgColor = "#ffffff";
                this.setChildIndex(this.imgLogo, this.numChildren - 1);
                if (companyLogoUrl) {
                    var oldUrl = gameLogoUrl ? gameLogoUrl : this.imgLogo.skin;
                    this.imgLogo.skin = companyLogoUrl;
                }
                else if (gameLogoUrl) {
                    oldUrl = gameLogoUrl;
                    this.imgLogo.skin = gameLogoUrl;
                }
                else {
                    oldUrl = this.imgLogo.skin;
                }
                var oldScale = this.imgLogo.scaleX;
                this.imgLogo.scale(scale, scale);
                let oldTop = this.imgLogo.top;
                this.imgLogo.centerX = 0;
                Tween2D.toAlpha(this.imgLogo, 0, 1, 200, null, () => {
                    Laya.timer.once(300, this, () => {
                        Tween2D.toAlpha(this.imgLogo, 1, 0, 300, null, () => {
                            panel.destroy();
                            this.imgLogo.scale(oldScale, oldScale);
                            this.imgLogo.alpha = 1;
                            this.imgLogo.skin = oldUrl;
                            this.imgLogo.top = oldTop;
                            this.isShowingLogoTween = false;
                        });
                    });
                });
            }
        }
        showProgress(isShowLabel = true, isShowBar = true, isShowTag = true) {
            if (this.lbProgress) {
                this.lbProgress.text = "0%";
                this.lbProgress.visible = isShowLabel;
            }
            if (this.barProgress) {
                this.barProgress.value = 0;
                this.barProgress.visible = isShowBar;
            }
            this.imgProgress.width = 0;
            this.progress = 0;
            if (this.lbTag) {
                this.lbTag.text = "资源加载中.";
                this.lbTag.visible = isShowTag;
                let tagPointStr = "";
                Laya.timer.loop(100, this, () => {
                    let count = tagPointStr.length + 1;
                    if (count > 3) {
                        count = 1;
                    }
                    tagPointStr = "";
                    for (let i = 0; i < count; i++) {
                        tagPointStr += ".";
                    }
                    this.lbTag.text = GlobalCtrl.Res.CurrentTag + "加载中" + tagPointStr;
                    this.progress += 0.01;
                    if (this.progress > 1) {
                        this.progress = 1;
                    }
                    if (this.barProgress) {
                        this.barProgress.value += 0.01;
                        if (this.barProgress.value > 1) {
                            this.barProgress.value = 1;
                        }
                    }
                    this.imgProgress.width = 615 * this.progress;
                    if (this.lbProgress) {
                        this.lbProgress.text = (this.progress * 100).toFixed(0) + "%";
                    }
                });
            }
            if (GlobalCtrl.Res.getTagCount == 0) {
                this.loadFinish();
            }
            else {
                GlobalCtrl.Event.on(EventType.Load_Res_Event, this, (args) => {
                    if (args.loadFinish) {
                        this.loadFinish();
                    }
                    else {
                        if (isShowLabel && this.lbProgress) {
                            this.lbProgress.text = args.isComplete ? "100%" : (args.progress * 100).toFixed(0) + "%";
                        }
                        if (isShowBar && this.barProgress) {
                            this.barProgress.value = args.isComplete ? 1 : args.progress;
                        }
                        if (isShowTag && this.lbTag) {
                            this.lbTag.text = args.tag;
                        }
                    }
                });
            }
        }
        loadFinish() {
            Laya.timer.clearAll(this);
            this.lbTag.text = "资源加载完成";
            this.imgProgress.width = 615;
            this.lbProgress.text = "100%";
            Laya.timer.once(100, this, () => {
                this.closeScene();
                GlobalCtrl.Event.event(EventType.Game_Init_Event);
            });
        }
    }

    class PuzzleUI extends BaseUI {
        constructor() {
            super(...arguments);
            this.curPtId = null;
        }
        initUI() {
            super.initUI();
            this.curPtId = this.getPtId();
            this.initPt();
            this.getPt();
        }
        openUIDelay(param) {
            Tween2D.toScale(this.btnGetPT, 1, 1.2, 500, null, null, true, true);
        }
        getPt() {
            this.btnGetPT.visible = false;
            this.btnContinue.visible = false;
            let ptSkin = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            let curPtSkin = GlobalCtrl.StorageData.curPtSkin;
            ptSkin = ptSkin.filter(item => !curPtSkin.includes(item));
            let ptId = UtilsFunctions.getRandomIten(ptSkin);
            this.pt.skin = 'gameUI/game/pt_' + this.curPtId + '_' + ptId + '.png';
            this.pt.visible = true;
            curPtSkin.push(ptId);
            GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.curPtSkin, curPtSkin);
            Laya.Tween.to(this.pt, { rotation: -720, x: this['pt' + ptId].x + 93.5, y: this['pt' + ptId].y + 93.5 }, 1200, null, Laya.Handler.create(this, () => {
                Laya.Tween.to(this.pt, { scaleX: 1, scaleY: 1 }, 300, null, Laya.Handler.create(this, () => {
                    this.pt.scale(1.2, 1.2);
                    this.pt.rotation = 0;
                    this.pt.visible = false;
                    this.pt.pos(1047, 22);
                    this.initPt();
                    this.btnContinue.visible = true;
                    if (curPtSkin.length >= 9) {
                        GlobalCtrl.Storage.updateCoin(300);
                        GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.curPtSkin, []);
                        this.getPtId(true);
                        this.ptBox.visible = false;
                        this.fullPt.skin = 'gameUI/game/pt' + this.curPtId + '.png';
                        this.fullPt.visible = true;
                        this.lbContinue.visible = false;
                        this.imgContinue.visible = true;
                    }
                    else {
                        this.btnGetPT.visible = true;
                    }
                }));
            }));
        }
        initPt() {
            let curPtSkin = GlobalCtrl.StorageData.curPtSkin;
            for (let i = 0; i < curPtSkin.length; i++) {
                let ptId = curPtSkin[i];
                let pt = this['pt' + ptId];
                pt.skin = 'gameUI/game/pt_' + this.curPtId + '_' + ptId + '.png';
                pt.visible = true;
            }
        }
        getPtId(isUpdateId = false) {
            let ptId = GlobalCtrl.StorageData.curPtId;
            let ptIds = [1, 2, 3];
            if (isUpdateId) {
                let index = ptIds.findIndex(e => e == ptId);
                ptIds.splice(index, 1);
                ptId = UtilsFunctions.getRandomIten(ptIds);
                GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.curPtId, ptId);
            }
            else {
                if (ptId == null) {
                    ptId = UtilsFunctions.getRandomIten(ptIds);
                    GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.curPtId, ptId);
                }
            }
            return ptId;
        }
        clickButton(key) {
            switch (key) {
                case "btnGetPT":
                    PlatformApi.showVideoAd(() => {
                        this.getPt();
                    });
                    break;
                case 'btnContinue':
                    GlobalCtrl.UI.openScene(UIType.VictoryUI, false, null, () => {
                        this.closeScene();
                    }, Laya.stage);
                    break;
            }
        }
        closeUI() {
            Tween2D.clear(this.btnGetPT);
        }
    }

    class PuzzleUI1 extends BaseUI {
        constructor() {
            super(...arguments);
            this.curPtId = null;
        }
        initUI() {
            super.initUI();
            this.curPtId = this.getPtId();
            this.initPt();
        }
        openUIDelay(param) {
        }
        initPt() {
            let curPtSkin = GlobalCtrl.StorageData.curPtSkin;
            for (let i = 0; i < curPtSkin.length; i++) {
                let ptId = curPtSkin[i];
                let pt = this['pt' + ptId];
                pt.skin = 'gameUI/game/pt_' + this.curPtId + '_' + ptId + '.png';
                pt.visible = true;
            }
        }
        getPtId(isUpdateId = false) {
            let ptId = GlobalCtrl.StorageData.curPtId;
            let ptIds = [1, 2, 3];
            if (isUpdateId) {
                let index = ptIds.findIndex(e => e == ptId);
                ptIds.splice(index, 1);
                ptId = UtilsFunctions.getRandomIten(ptIds);
                GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.curPtId, ptId);
            }
            else {
                if (ptId == null) {
                    ptId = UtilsFunctions.getRandomIten(ptIds);
                    GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey.curPtId, ptId);
                }
            }
            return ptId;
        }
        clickButton(key) {
        }
        closeUI() {
        }
    }

    class SetUI extends BaseUI {
        initUI() {
            super.initUI();
            GameLogic.clearUpdateTimeLoop();
        }
        openUIDelay() {
            if (PlatformApi.gridAd)
                PlatformApi.gridAd.hide();
            this.btnMusic.skin = GlobalCtrl.StorageData.isMusic ? "gameUI/game/sz_k.png" : "gameUI/game/sz_g.png";
            this.btnSound.skin = GlobalCtrl.StorageData.isSound ? "gameUI/game/sz_k.png" : "gameUI/game/sz_g.png";
            this.btnVibrate.skin = GlobalCtrl.StorageData.isVibrate ? "gameUI/game/sz_k.png" : "gameUI/game/sz_g.png";
        }
        clickButton(key) {
            switch (key) {
                case "btnMusic":
                    this.changeMusicClick();
                    break;
                case "btnSound":
                    this.changeSoundClick();
                    break;
                case "btnVibrate":
                    this.changeVibrateClick();
                    break;
            }
        }
        changeMusicClick() {
            this.btnMusic.skin = GlobalCtrl.Storage.musicSiwtch() ? "gameUI/game/sz_k.png" : "gameUI/game/sz_g.png";
            if (GlobalCtrl.StorageData.isMusic) {
                GlobalCtrl.Audio.playMusic(AudioType.Bgm);
            }
            else {
                GlobalCtrl.Audio.stopMusic();
            }
        }
        changeSoundClick() {
            this.btnSound.skin = GlobalCtrl.Storage.soundSiwtch() ? "gameUI/game/sz_k.png" : "gameUI/game/sz_g.png";
        }
        changeVibrateClick() {
            this.btnVibrate.skin = GlobalCtrl.Storage.vibrateSiwtch() ? "gameUI/game/sz_k.png" : "gameUI/game/sz_g.png";
        }
        closeUI() {
            if (PlatformApi.gridAd)
                PlatformApi.gridAd.show();
            GameLogic.updateLevelTime();
        }
    }

    class SkinUI extends BaseUI {
        initUI() {
            super.initUI();
        }
        clickSkinType(isClickCarSkin) {
            if ((isClickCarSkin && this.btnCarSkin.skin == 'gameUI/game/pf_yq_2.png') || (!isClickCarSkin && this.btnRoleSkin.skin == 'gameUI/game/pf_yq_2.png'))
                return;
            this.btnCarSkin.skin = isClickCarSkin ? 'gameUI/game/pf_yq_2.png' : 'gameUI/game/pf_yq_1.png';
            this.btnRoleSkin.skin = !isClickCarSkin ? 'gameUI/game/pf_yq_2.png' : 'gameUI/game/pf_yq_1.png';
            this.btnCarSkin.getChildAt(0).skin = this.btnCarSkin.skin == 'gameUI/game/pf_yq_2.png' ? 'gameUI/game/pf_cz_2.png' : 'gameUI/game/pf_cz_1.png';
            this.btnRoleSkin.getChildAt(0).skin = this.btnRoleSkin.skin == 'gameUI/game/pf_yq_2.png' ? 'gameUI/game/pf_ry_2.png' : 'gameUI/game/pf_ry_1.png';
            this.CarSkinBox.visible = isClickCarSkin;
            this.RoleSkinBox.visible = !isClickCarSkin;
            this.updateSkinData(isClickCarSkin);
        }
        updateSkinData(isUpdateCarSkin) {
            let storageData = GlobalCtrl.StorageData;
            let list = isUpdateCarSkin ? this.CarSkinBox : this.RoleSkinBox;
            for (let i = 0; i < list.numChildren; i++) {
                let btnSkin = list.getChildAt(i);
                let selectd = btnSkin.getChildByName('Selectd');
                let selectdVisible = false;
                let adBg = btnSkin.getChildByName('adBg');
                let adBgVisible = false;
                if (isUpdateCarSkin) {
                    selectdVisible = storageData.carSkinId == i + 1;
                    adBgVisible = storageData.carSkins.findIndex(e => e == i + 1) == -1;
                }
                else {
                    selectdVisible = storageData.roleSkinId == i + 1;
                    adBgVisible = storageData.roleSkins.findIndex(e => e == i + 1) == -1;
                }
                selectd.visible = selectdVisible;
                adBg.visible = adBgVisible;
            }
        }
        openUIDelay() {
            this.clickSkinType(true);
            if (PlatformApi.gridAd)
                PlatformApi.gridAd.hide();
        }
        getSkin(skinId, isCarSkin) {
            let storageData = GlobalCtrl.StorageData;
            let skins = isCarSkin ? storageData.carSkins : storageData.roleSkins;
            let curSkinId = isCarSkin ? storageData.carSkinId : storageData.roleSkinId;
            if (curSkinId == skinId)
                return;
            if (skins.findIndex(e => e == skinId) != -1) {
                GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey[isCarSkin ? 'carSkinId' : 'roleSkinId'], skinId);
                if (isCarSkin) {
                    GameLogic.updateCarSkin();
                }
                else {
                    GameLogic.updateRoleSkin();
                }
                this.updateSkinData(isCarSkin);
            }
            else {
                let coin = GlobalCtrl.StorageData.coin;
                if (coin >= 1200) {
                    GlobalCtrl.Storage.updateCoin(-1200);
                    let list = storageData[isCarSkin ? 'carSkins' : 'roleSkins'];
                    list.push(skinId);
                    GlobalCtrl.Storage.setStorage(GlobalCtrl.StorageKey[isCarSkin ? 'carSkins' : 'roleSkins'], list);
                    this.updateSkinData(isCarSkin);
                }
                else {
                    GlobalCtrl.UI.openScene(UIType.GetCoinUI, false, null, null, Laya.stage);
                }
            }
        }
        clickButton(key) {
            switch (key) {
                case "btnCarSkin":
                    this.clickSkinType(true);
                    break;
                case "btnRoleSkin":
                    this.clickSkinType(false);
                    break;
                case "btnCarSkin1":
                    this.getSkin(1, true);
                    break;
                case "btnCarSkin2":
                    this.getSkin(2, true);
                    break;
                case "btnCarSkin3":
                    this.getSkin(3, true);
                    break;
                case "btnCarSkin4":
                    this.getSkin(4, true);
                    break;
                case "btnCarSkin5":
                    this.getSkin(5, true);
                    break;
                case "btnCarSkin6":
                    this.getSkin(6, true);
                    break;
                case "btnCarSkin7":
                    this.getSkin(7, true);
                    break;
                case "btnRoleSkin1":
                    this.getSkin(1, false);
                    break;
                case "btnRoleSkin2":
                    this.getSkin(2, false);
                    break;
                case "btnRoleSkin3":
                    this.getSkin(3, false);
                    break;
                case "btnRoleSkin4":
                    this.getSkin(4, false);
                    break;
                case "btnRoleSkin5":
                    this.getSkin(5, false);
                    break;
                case "btnRoleSkin6":
                    this.getSkin(6, false);
                    break;
                case 'btnAddCoin':
                    GlobalCtrl.UI.openScene(UIType.GetCoinUI, false, null, null, Laya.stage);
                    break;
            }
        }
        closeUI() {
            if (PlatformApi.gridAd)
                PlatformApi.gridAd.show();
        }
    }

    class VictoryUI extends BaseUI {
        constructor() {
            super(...arguments);
            this.curSuperMultipleCoin = 0;
            this.curCoin = 0;
            this.multipleArrowEndVal = 375;
        }
        openUIDelay(param) {
            this.curCoin = Math.floor(Math.random() * 51) + 50;
            this.lbAddCoin.text = '+ ' + this.curCoin;
            GlobalCtrl.Storage.updateCoin(this.curCoin);
            this.randomMultiple();
            Tween2D.toScale(this.btnSuperAward, 1, 1.2, 500, null, null, true, true);
            Laya.timer.frameLoop(1, this, () => {
                this.curSuperMultipleCoin = this.curCoin * this.getMultiple(this.multipleArrow.x);
                this.lbSuperAward.text = '+' + this.curSuperMultipleCoin;
            });
        }
        randomMultiple() {
            Tween2D.toPosition(this.multipleArrow, { x: this.multipleArrowEndVal, y: this.multipleArrow.y }, 1000, null, () => {
                this.multipleArrowEndVal = this.multipleArrowEndVal == 375 ? 10 : 375;
                this.randomMultiple();
            });
        }
        getMultiple(number) {
            const ranges = [
                { min: 10, max: 58, result: 2 },
                { min: 59, max: 116, result: 3 },
                { min: 117, max: 174, result: 5 },
                { min: 175, max: 234, result: 10 },
                { min: 235, max: 292, result: 5 },
                { min: 293, max: 351, result: 3 },
                { min: 352, max: 375, result: 2 }
            ];
            for (const range of ranges) {
                if (number >= range.min && number <= range.max) {
                    return range.result;
                }
            }
            return null;
        }
        clickButton(key) {
            switch (key) {
                case "btnSuperAward":
                    Tween2D.clear(this.multipleArrow);
                    PlatformApi.showVideoAd(() => {
                        GlobalCtrl.Storage.updateCoin(this.curSuperMultipleCoin);
                        GlobalCtrl.Event.event(EventType.Game_Init_Event);
                    }, () => {
                        this.randomMultiple();
                    });
                    break;
                case "btnContinue":
                    GlobalCtrl.Event.event(EventType.Game_Init_Event);
                    break;
            }
        }
        closeUI() {
            Tween2D.clear(this.multipleArrow);
            Tween2D.clear(this.btnSuperAward);
            if (GlobalCtrl.StorageData.challengeLevel == 2) {
                GlobalCtrl.UI.openScene(UIType.DifficultySurgeUI, false, null, null, Laya.stage);
            }
        }
    }

    class GameConfig$1 {
        constructor() {
        }
        static init() {
            var reg = Laya.ClassUtils.regClass;
            reg("SGSDK/SGBoxBottom.ts", SGBoxBottom);
            reg("SGSDK/SGScale.ts", SGScale);
            reg("SGSDK/SGRotate.ts", SGRotate);
            reg("SGSDK/SGBoxMiddle.ts", SGBoxMiddle);
            reg("SGSDK/SGFinishUI.ts", SGFinishUI);
            reg("SGSDK/SGHomeUI.ts", SGHomeUI);
            reg("SGSDK/SGRemen.ts", SGRemen);
            reg("SGSDK/SGSkin.ts", SGSkin);
            reg("uiScenes/DifficultySurgeUI.ts", DifficultySurgeUI);
            reg("uiScenes/FailUI.ts", FailUI);
            reg("uiScenes/GameUI.ts", GameUI);
            reg("uiScenes/GetBuffUI.ts", GetBuffUI);
            reg("uiScenes/GetCoinUI.ts", GetCoinUI);
            reg("uiScenes/LoadUI.ts", LoadUI);
            reg("uiScenes/PuzzleUI.ts", PuzzleUI);
            reg("uiScenes/PuzzleUI1.ts", PuzzleUI1);
            reg("uiScenes/SetUI.ts", SetUI);
            reg("uiScenes/SkinUI.ts", SkinUI);
            reg("uiScenes/VictoryUI.ts", VictoryUI);
        }
    }
    GameConfig$1.width = 750;
    GameConfig$1.height = 1334;
    GameConfig$1.scaleMode = "fixedauto";
    GameConfig$1.screenMode = "vertical";
    GameConfig$1.alignV = "middle";
    GameConfig$1.alignH = "center";
    GameConfig$1.startScene = "uiScenes/SetUI.scene";
    GameConfig$1.sceneRoot = "";
    GameConfig$1.debug = false;
    GameConfig$1.stat = false;
    GameConfig$1.physicsDebug = true;
    GameConfig$1.exportSceneToJson = true;
    GameConfig$1.init();

    class Main {
        constructor() {
            if (window["Laya3D"])
                Laya3D.init(GameConfig$1.width, GameConfig$1.height);
            else
                Laya.init(GameConfig$1.width, GameConfig$1.height, Laya["WebGL"]);
            Laya["Physics"] && Laya["Physics"].enable();
            Laya["DebugPanel"] && Laya["DebugPanel"].enable();
            Laya.stage.scaleMode = GameConfig$1.scaleMode;
            Laya.stage.screenMode = GameConfig$1.screenMode;
            Laya.stage.alignV = GameConfig$1.alignV;
            Laya.stage.alignH = GameConfig$1.alignH;
            Laya.URL.exportSceneToJson = GameConfig$1.exportSceneToJson;
            Laya.stage.useRetinalCanvas = true;
            if (GameConfig$1.debug || Laya.Utils.getQueryString("debug") == "true")
                Laya.enableDebugPanel();
            if (GameConfig$1.physicsDebug && Laya["PhysicsDebugDraw"])
                Laya["PhysicsDebugDraw"].enable();
            if (GameConfig$1.stat)
                Laya.Stat.show();
            Laya.alertGlobalError(true);
            Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
        }
        onVersionLoaded() {
            Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
        }
        onConfigLoaded() {
            GlobalCtrl.initFrameworks();
            GlobalCtrl.Audio.setMusicVolume(0.6);
            GlobalCtrl.Res.addLoadTag("SDK");
            PlatformApi.initSDK(() => {
                if (PlatformApi.sdkData) {
                    GlobalCtrl.CommonData.isClearVersion = PlatformApi.sdkData.allowMistouch == 0;
                }
                GlobalCtrl.Res.removeLoadTag("SDK");
                GlobalCtrl.CommonData.canShowBanner = (Laya.stage.width / Laya.stage.height) < 0.47;
            });
            PlatformApi.init((isSuccess) => {
                if (isSuccess)
                    GameLogic.init();
            });
        }
    }
    new Main();

}());
//# sourceMappingURL=bundle.js.map
